= ¿Y esa API si es segura?

Hoy en día es común encontrar APIs para casi cualquier servicio o producto 
ofrecido en internet. Desde juegos hasta servicios bancarios, pasando por 
noticias e incluso música, la demanda de esta tecnología es literalmente global. 

Para los que no sepan, una API no es más que un software que tiene la capacidad 
de comunicarse con otra aplicación que, en teoría, no tiene ningún tipo de 
relación, sea porque sus objetivos son diferentes, la tecnología empleada en su 
creación es distinta o, incluso, los fabricantes o propietarios no son los 
mismos. Un ejemplo de esto sería Facebook y toda la variedad de juegos que se 
pueden disfrutar en dicha plataforma, en este caso, los juegos son las APIs.

El uso masivo de estas pequeñas aplicaciones ha permitido que los servicios 
ofrecidos por distintas empresas y personas intercambien funcionalidades, datos 
y recursos mientras interactúan entre sí, generando de esta forma innumerables 
oportunidades de negocio y la posibilidad de ofrecer servicios que antes parecían 
imposibles.

Pero este intercambio de información tiene que ser seguro y sobre todo debe 
garantizar, a los usuarios que las usan, que, en caso de necesitarlos para su 
funcionalidad, sus datos confidenciales no serán divulgados a un tercero. Por 
ejemplo, imaginemos la siguiente situación; una persona que disfruta de la 
comodidad, agilidad y rapidez que brinda una empresa dedicada a prestar 
servicios de transporte privado, usa la API creada por esta empresa para 
solicitar un servicio. Esta persona para pagar el servicio utiliza su cuenta 
bancaria desde la misma aplicación ¿ahora, imagínese que pasaría si la 
información financiera del cliente, como números de cuenta y claves de acceso 
fueran conocidos por la aplicación de la empresa de transporte? Podría suceder 
que uno de los administradores acceda a la información bancaria del cliente y 
usarla en su propio beneficio, y al ser un servicio externo a la entidad 
bancaria, no hay manera que esta pueda hacerse responsable por la posible 
pérdida de activos en la cuenta. Básicamente, sería como entregarle las llaves 
de la casa a un desconocido y esperar que este no te vaya a robar. 

Bien, entendida la idea del problema surgió la necesidad de crear reglas que 
permitieran a una API acceder o interactuar con un servicio externo de manera 
limitada y sobre todo, en caso de requerirse, ni el usuario ni el prestador de 
servicio tengan que revelar la información confidencial compartida por ambos a 
la API.

Ese conjunto de reglas se dio a conocer en el año 2007, y gracias a la 
colaboración de varios ingenieros de twitter, google y otras empresas, como 
Open Autorización Protocol o por sus siglas OAUTH en su versión 1.0 aunque no 
fue hasta el 2010 que recibió su aprobación de estándar. 

Oauth, como su nombre lo dice, es un protocolo abierto que permite la autorización 
segura de una API, de manera estándar y simple, para interactuar con aplicaciones 
de escritorio, móviles y sitios web (IETF, 2010). Aunque, dos años después este 
estándar fue reemplazado por una evolución del mismo oauth 2.0 que añadió 
características tales como la dependencia de transporte de datos mediante el 
uso de HTTPS, una mayor flexibilidad en su uso y una centralización en el uso 
de las diferentes claves (IETF, 2012).

image::/articles/jhonyvilla/y-esa-api-si-es-segura/oauth.png[]
*_Funcionamiento de oauth: tomado de lithium.com_*

Para explicar el funcionamiento de oauth haré uso del siguiente ejemplo. Cabe 
aclarar que lo explicado es para explicar la manera en que trabaja el protocolo 
y no necesariamente se asemeja a la forma real en que trabajan los servicios y 
aplicaciones mencionadas. 

Supongamos que vamos a realizar una compra por internet y para ello usaremos 
una aplicación de pago en línea que llamaremos cliente. Obviamente como es un 
pago, necesitaremos la intervención de un banco el cual vendrá a ser el servidor 
de autorización. Y nosotros nos identificaremos como usuario.

Cuando un usuario accede a la aplicación, el cliente se pone en contacto con el 
servidor solicitando unas credenciales temporales. Esta solicitud lleva consigo 
dos identificadores proporcionados previamente por el servidor cuando la aplicación 
fue creada. 
 
Cuando llega la petición al servidor y este confirma que los identificadores 
son válidos, le responde al cliente enviándole por respuesta las credenciales 
solicitadas. Estas credenciales son dos e identifican al cliente y el proceso 
de autenticación actual.

Una vez el cliente tiene las credenciales, este comunica directamente al 
usuario con el servidor y el servidor pide al usuario sus datos de identificación. 
Después de que el usuario se identifica, el servidor le pregunta si autoriza al 
cliente realizar la transacción. En caso de que el usuario autorice, el servidor 
envía al cliente un código, generado aleatoriamente, que sirve como 
identificador del usuario. 

Cuando el cliente conoce ese código, le solicita al servidor unas credenciales 
finales enviándole tres datos, el código del usuario y las dos credenciales 
solicitadas anteriormente. De esta manera, y si todo se ha realizado 
correctamente, el servidor comprueba esos datos y envía al cliente dos 
identificadores de acceso los cuales serán usados para completar la transacción. 
Una vez termina la transacción, las credenciales usadas se vuelven inútiles, 
mejor dicho, se eliminan.

En conclusión, desde el punto de vista de la seguridad el protocolo resuelve el 
problema de que un usuario tenga que usar su información confidencial de un 
sitio web o plataforma (datos de autenticación) en múltiples APIs que, en 
teoría, requieren de dicha información para poder ser usadas.
 
Además, como el protocolo funciona con un mecanismo de identificación simultanea 
de un usuario, una aplicación y una sesión verificando la integridad de las 
peticiones mediante firmas digitales (una firma digital es un mecanismo 
criptográfico que permite al receptor de un mensaje firmado digitalmente 
identificar a la entidad originadora de dicho mensaje), evita que, en caso de 
que una petición sea capturada, pueda ser utilizada desde otra aplicación con 
el fin de acceder a los datos de un usuario. 

Para terminar, la importancia del protocolo radica en su simplicidad, y por ser 
un estándar abierto, permite que muchas plataformas lo usen teniendo en cuenta, 
eso sí, todas las medidas de seguridad que se deben implementar para que su uso 
sea seguro y confiable. 

== Bibliografía
IETF. (Abril de 2010). IETF Tools. Obtenido de https://tools.ietf.org/html/rfc5849

IETF. (Octubre de 2012). IETF Tools. Obtenido de https://tools.ietf.org/html/rfc6750