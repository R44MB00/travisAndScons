= Codeeval: LONGES LINES

This challenge is about printing an specified number of the longest lines sorted on their 
length in descending order. You will be given a file.

Where the first line indicates the number of lines you should print.
The other lines are letters/words/phrases/ from different length and randomly.

.e.g
==========================
*Content of the file given*
2
Hello World
CodeEval
Quick Fox
A
San Francisco
==========================

.Result
==========================
San Francisco
Hello World
==========================

To solve this challenge i will use the _Collections_ library, i will have two arrays:
. One array will store each length of each line in the file
. The other array will store line by line without omitting anything

So, first at all, _Collections_ library should be imported properly to be used.

[source, java]
----
import java.io.*;
import java.util.*;
import java.util.Collections;
----

Create the class, the main function and next the code to read the file coming from
the first console argument. 

[source, java]
----
public class Main {
    public static void main (String[] args) throws IOException {
        File file = new File(args[0]);
        BufferedReader buffer = new BufferedReader(new FileReader(file));
----

Instantiate the variables used in this case and the most important,
The two list that will do the *'magic'*.
As i said before, one Array will store the length of each line and the another one
will store line by line the content of the file.

[source, java]
----
        String line;
        int n = 0;
        int i = 0;
        int j = 0;
        ArrayList<String> words = new ArrayList<String>();
        ArrayList<Integer> len = new ArrayList<Integer>();
----

Use the _readLine()_ function from the buffer variable to read the file line by line
and use the _trim()_ function to store the line when a new line its seen.
[source, java]
----
        while ((line = buffer.readLine()) != null) {
            line = line.trim();
----

Here, the first condition is for getting the first line and casting it to int. Remember the first line will be used to how much lines will be printed as result. if the first condition is not met, then we will procede
to store in *words* _ArrayList_ each line and in the *len* _ArrayList_ we will store the length of each line
[source, java] 
----          
            if(i == 0)
            {
                n = Integer.valueOf(line);
                i++;
            }
            else
            {
                words.add(line);
                len.add(line.length());
            }

        }
----

As we got to figure out how to print the longest lines in descending order, we can avoid making a nested loop
to iterate the *words* _ArrayList_ to compare the length of item per item and sorting the result as needed.
So, we use the _sort()_ and _reverse()_ functions. The _sort()_ function will rearrange the array in ascending order, e.g len['9','20','1','5'] will be len['1','5','9','20']. and finally we will use the _reverse()_ function to change its order to descending. e.g Following the output of the last example len['20','9','5','1']. We got what we needed.

[source, java]
----
        Collections.sort(len);
        Collections.reverse(len);
----

Finally, a nested loop, where the range of the first loop (*n*) will be the numbers of lines that will be printed as output, and the second loop will iterate the *words* _ArrayList_ and will print the longest lines.
[source, java]
----
        for(int o = 0; o < n; o++){
            for (j = 0; j < words.size(); j++ ) {
                String word = words.get(j);
                if(word.length() == len.get(o)){
                    System.out.println(word);
                }

            }
        }
            
    }
}
----