= Las entrañas de AES

== El origen de AES (Advanced encryption Standard)

En 1997 la NIST(National Institute of Standards and Technology) realizó una convocatoria para reemplazar el
algoritmo de cifrado DES(Data encryption Standard), entre 15 equipos, 5 finalistas, el algoritmo seleccionado 
fue Rijndael, el sucesor de DES y el candidato para AES. 

AES es un algoritmo de cifrado simétrico por bloques, eso significa que procesa bloques de datos de *128 bits*,
usando claves con una longitud de *128*, *192* y *256 bits*, todas sus operaciones se realizan a un nivel de 
8-bits (1 byte) y las operaciones aritméticas realizadas como adición, sustracción, multiplicación o división se
efectúan sobre campos finitos de Galois (GF). 

La estructura de este y de otros algoritmos de cifrado simétrico son complejos y no son fáciles de explicar, ya 
que tienen una fundamentación matemática muy fuerte, pero tratare de explicar por lo menos cuales son los 
procesos internos que realiza el algoritmo.


[NOTE]
=====================================================================
En este artículo no se tratara Rijndael, ya que maneja diferentes tamaños de bloques y longitud de claves que no
son las adoptadas por AES. 
=====================================================================

Tratare de explicar cuales son los procesos que realiza AES para:
[subs="quotes"]
--------------------------------------
 Llevar esto: *"Dans ma nuit où"*  - Texto a cifrar
 
 a esto: *"ff0b844a0853bf7c6934ab4364148fb9"* - Texto cifrado
--------------------------------------

=== Consideraciones, aclaraciones o conceptos que deben mencionarse.

* *_bit_* el digito binario, que solo tiene dos valores, *1* o *0*.

* *_byte_* un grupo de *8 bits* que es considerado como una sola entidad. *1byte = 8bits*. e.g *C = 01000011*

* *_Nb_* número de columnas (Palabras de *32-bits*) que comprenden el *_State_*.

* *_Expansion key_* rutina usada para generar series de *Round keys* de la clave original

* *_State_* un cifrado intermedio que puede verse como una matriz de 4 filas con *Nb* columnas.

* *_S-Box_* tabla de sustitución usada en varios pasos de transformación y de expansión de la clave.

* *_GF_* campos finitos de Galois.

* *_XOR_* la operación lógica bit a bit.

=== Longitud de claves

Especificación de la longitud de la clave (*128*, *192*, *256* bits).
[subs="quotes"]
--------------------------------------
Sea *n* = clave

* Longitud de clave = 128 bits; *n < 16 bytes*

* Longitud de clave = 192 bits; *n < 24 bytes*

* Longitud de clave = 256 bits; *n < 32 bytes*

De ahí provienen los diferentes sabores de AES: *AES-128*, *AES-192* y *AES-256*.
--------------------------------------

== Estructura de AES

Las entradas y salidas del algoritmo de AES, consisten en secuencias de *128 bits* (Digitos con valores de *0* y *1*)
dichas secuencias son a las que nos referimos como bloques y la cantidad de digitos representan la longitud, a 
su vez este bloque se representa como una matriz cuadrada de 4 x 4, donde el ordenamiento de la entrada en la 
matriz es por columnas.

e.g

.El ordenamiento por columnas de nuestro mensaje es de la forma, *{B0 B1 B2 B3 B4... Bi}* Donde _i < 16_ y _B_
es un *byte* (*8 bits*):  
[options="header"]
|==========================================
|*B0*|*B4*|*B8*|*B12*
|*B1*|*B5*|*B9*|*B13*
|*B2*|*B6*|*B10*|*B14*
|*B3*|*B7*|*B11*|*B15*
|==========================================

[subs="quotes"]
-------------------------------------------
Si nuestro texto a cifrar es: _"Dans ma nuit où"_ *(Tomando en cuenta los espacios en blanco!)*  

Y su respectiva representación hexadecimal: _"44616e73206d61206e756974206fc3b9"_
-------------------------------------------

Siguiendo lo anterior, el resultado sería una matriz de 4 x 4, de la siguiente forma:
[options="header"]
|==========================================
|*44*|*20*|*6e*|*20*   
|*61*|*6d*|*75*|*6f*   
|*6e*|*61*|*69*|*c3*   
|*73*|*20*|*74*|*b9*   
|==========================================

Similarmente esto pasa con nuestra llave. Retomando lo anterior, el bloque de entrada inicial es copiado en una
matriz, llamada matriz de estados (_State_) de 4 x 4 donde sufre diferentes transformaciones durante el cifrado
o el descifrado y finalmente, como resultado obtenemos una matriz de 4 x 4. Las operaciones del cifrado 
consisten en *N* rondas, donde la cantidad de rondas dependen del tamaño de la clave:

[subs="quotes"]
-------------------------------------------
* Si *N* = 10;  10 rondas para una clave de *16 bytes*
* Si *N* = 12;  12 rondas para una clave de *24 bytes*
* Si *N* = 14;  14 rondas para una clave de *32 bytes*
-------------------------------------------

Las primeras, *N-1* rondas consisten en 4 distintas funciones de transformación: _SubBytes_, _ShiftRows_, 
_MixColumns_ y el _AddRoundKey_, que las describire en un momento. La ultima ronda consiste solo de tres
transformaciones y hay una transformación inicial (_AddRoundKey_) antes de la primera ronda, que la consideramos
como la *Ronda 0*. En pocas palabras, entra una matriz de 4 x 4, sale una matriz de 4 x 4 que fue transformada 
mutliples veces dependiendo de la longitud de la clave.

image::/articles/Skhorn/las-entranas-de-AES/images/aes-resume-steps.png[]
--- _Cryptography and Network Security, Stallings. p 151_ ---

== Transformaciones durante el cifrado

* *SubBytes* - *Sustitución de Bytes*

Durante el cifrado, en cada ronda, los valores de la matriz, son sustituidos con su correspondiente valor en una
tabla, llamada *S-Box*.

image::/articles/Skhorn/las-entranas-de-AES/images/aes-s-box.png[]
--- _Advanced Encryption Standard by Example. p 5_ ---

e.g 
Si la matriz en la posición [0][0] es *A9*, buscamos el valor correspondiente en la *S-Box*, que sería *D3* y lo
reemplazamos. ¿Cómo hacemos esto? Primero buscamos el primer dígito por columna, en este caso, la *A*, ahora 
buscamos el segundo dígito, *9* por fila y nos fijamos en el valor correspondiente, la intersección de estos valores
nos da como resultado D3.

Matriz inicial
[options="header"]
|==========================================
|*21*|*1D*|*04*|*43*
|*58*|*5B*|*00*|*19*
|*59*|*07*|*00*|*13*
|*56*|*03*|*07*|*16* 
|==========================================

Aplicando la sustitución con la *S-Box*
[options="header"]
|==========================================
|*FD*|*9C*|*F2*|*1A*
|*6A*|*39*|*63*|*D4*
|*CB*|*C5*|*63*|*7D*
|*B1*|*7B*|*C5*|*47*
|==========================================

image::/articles/Skhorn/las-entranas-de-AES/images/s-box-image.png[]
--- _Cryptography and Network Security, Stallings. p 156_ ---

* *ShiftRows* - *Permutaciones*

En este estado, cada fila de la matriz realiza un cambio de fila circular, esto significa, que en cada fila,
 cada byte se mueve ciertos espacios, uno sobre otro. La rotación se determina de esta manera:
[subs="quotes"]
--------------------------------------
* Fila 0 : Rotación = 0
* Fila 1 : Rotación = 1
* Fila 2 : Rotación = 2
* Fila 3 : Rotación = 3
--------------------------------------

e.g 

Matriz inicial
[options="header"]
|==========================================
|Fila 0 |*FD*|*9C*|*F2*|*1A*  
|Fila 1 |*6A*|*39*|*63*|*D4*   
|Fila 2 |*CB*|*C5*|*63*|*7D*  
|Fila 3 |*B1*|*7B*|*C5*|*47*   
|==========================================

ShiftRow aplicado
[options="header"]
|==========================================
|*FD*|*9C*|*F2*|*1A* 
|*39*|*63*|*D4*|*6A*
|*63*|*7D*|*CB*|*C5*
|*47*|*B1*|*7B*|*C5*
|==========================================

image::/articles/Skhorn/las-entranas-de-AES/images/shitf-rows-image.png[]
--- _Cryptography and Network Security, Stallings. p 162_ ---


* *MixColumns*
Este paso es el más dispendioso y más difícil de entender y explicar. Consiste de dos partes. La primera, una
multiplicación de matrices, entre la matriz en dicho estado contra una matriz de multiplicación y la segunda
parte, es como se implementa esta multiplicación sobre los campos finitos de Galois (_*GF*_).

** *Multiplicación de columnas*

La multiplicación es efectuada una columna a la vez (4 bytes), donde cada valor es multiplicado contra cada
valor en la fila de la matriz de multiplicación, (16 multiplicaciones). En cada resultado de estas 
multiplicaciones se efectua un *XOR* para producir los nuevos 4 bytes para el siguiente estado de la matriz.

Matriz de multiplicación
[options="header"]
|==========================================
|*02*|*03*|*01*|*01*   
|*01*|*02*|*03*|*01*   
|*01*|*01*|*02*|*03*  
|*03*|*01*|*01*|*02*   
|==========================================

Matriz de estados
[options="header"]
|==========================================
|*B0*|*B4*|*B8*|*B12*
|*B1*|*B5*|*B9*|*B13*
|*B2*|*B6*|*B10*|*B14*
|*B3*|*B7*|*B11*|*B15*
|==========================================

El primer byte resultante es calculado al multiplicar los 4 valores de la primera columna de la matriz de
estados, contra los 4 valores de la primera fila de la matriz de multiplicación, al resultado de cada
multiplicación se le efectúa un XOR para así 1 byte.
[subs="quotes"]
-----------------------------------------------
*B0* = (B0 * 02) _XOR_ (B1 * 03) _XOR_ (B2 * 01) _XOR_ (B3 * 01)
-----------------------------------------------
El segundo byte resultante es calculado al multiplicar los 4 valores de la primera columna de la matriz de 
estados, contra los 4 valores de la segunda fila de la matriz de multiplicación y al resultado de cada
multiplicación se le efectúa un XOR para así generar 1 byte.
[subs="quotes"]
-----------------------------------------------
*B1* = (B0 * 01) _XOR_ (B1 * 02) _XOR_ (B2 * 03) _XOR_ (B3 * 01)
-----------------------------------------------
El tercer byte resultante es calculado al multiplicar los 4 valores de la primera columna de la matriz de
estados, contra los 4 valores de la tercera fila de la matriz de multiplicación y al resultado de cada
multiplicación se le efectúa un XOR para así generar 1 byte.
[subs="quotes"]
-----------------------------------------------
*B2* = (B0 * 01) _XOR_ (B1 * 01) _XOR_ (B2 * 02) _XOR_ (B3 * 03)
-----------------------------------------------
El cuarto byte resultante es calculado al multiplicar los 4 valores de la primera columna de la matriz de
estados, contra los 4 valores de la cuarta fila de la matriz de multiplicación y al resultado de cada
multiplicación se le efectúa un XOR para así generar 1 byte.
[subs="quotes"]
-----------------------------------------------
*B3* = (B0 * 03) _XOR_ (B1 * 01) _XOR_ (B2 * 01) _XOR_ (B3 * 02)
-----------------------------------------------
Seguidamente, este proceso se efectúa con la próxima columna, hasta que no hayan más.

Colocando todo esto junto:
[subs="quotes"]
-----------------------------------------------
* *Primera columna*
*B0* = (B0 * 02) _XOR_ (B1 * 03) _XOR_ (B2 * 01) _XOR_ (B3 * 01) 
*B1* = (B0 * 01) _XOR_ (B1 * 02) _XOR_ (B2 * 03) _XOR_ (B3 * 01) 
*B2* = (B0 * 01) _XOR_ (B1 * 01) _XOR_ (B2 * 02) _XOR_ (B3 * 03) 
*B3* = (B0 * 03) _XOR_ (B1 * 01) _XOR_ (B2 * 01) _XOR_ (B3 * 02) 

* *Segunda columna*
*B4* = (B4 * 02) _XOR_ (B5 * 03) _XOR_ (B6 * 01) _XOR_ (B7 * 01)
*B5* = (B4 * 01) _XOR_ (B5 * 02) _XOR_ (B6 * 03) _XOR_ (B7 * 01)
*B6* = (B4 * 01) _XOR_ (B5 * 01) _XOR_ (B6 * 02) _XOR_ (B7 * 03)
*B7* = (B4 * 03) _XOR_ (B5 * 01) _XOR_ (B6 * 01) _XOR_ (B7 * 02)

* *Tercera columna*
*B8* = (B8 * 02) _XOR_ (B9 * 03) _XOR_ (B10 * 01) _XOR_ (B11 * 01)
*B9* = (B8 * 01) _XOR_ (B9 * 02) _XOR_ (B10 * 03) _XOR_ (B11 * 01)
*B10* = (B8 * 01) _XOR_ (B9 * 01) _XOR_ (B10 * 02) _XOR_ (B11 * 03)
*B11* = (B8 * 03) _XOR_ (B9 * 01) _XOR_ (B10 * 01) _XOR_ (B11 * 02)

* *Cuarta columna*
*B12* = (B12 * 02) _XOR_ (B13 * 03) _XOR_ (B14 * 01) _XOR_ (B15 * 01)
*B13* = (B12 * 01) _XOR_ (B13 * 02) _XOR_ (B14 * 03) _XOR_ (B15 * 01)
*B14* = (B12 * 01) _XOR_ (B13 * 01) _XOR_ (B14 * 02) _XOR_ (B15 * 03)
*B15* = (B12 * 03) _XOR_ (B13 * 01) _XOR_ (B14 * 01) _XOR_ (B15 * 02)
-----------------------------------------------

** *Multiplicación sobre campos finitos de Galois*

Las matemáticas de esta parte se las explico en el doctorado. No, siendo serio, no trataré ese tema en este
artículo. Solo me concentrare en las operaciones realizadas sobre estas tablas durante la multiplicación.

image::/articles/Skhorn/las-entranas-de-AES/images/e-table.png[]
--- _Advanced Encryption Standard by Example. p 8_ ---

image::/articles/Skhorn/las-entranas-de-AES/images/l-table.png[]
--- _Advanced Encryption Standard by Example. p 9_ ---

Similar al proceso de la fase de SubBytes con *S-Box*. Tomar un valor hexadecimal y buscar su correspondiente en la tabla,
aunque en esta, cuando se realiza la multiplicación, cada par de valores, es entonces reemplazado por su correspondiente en la
tabla *_L_* y se le efectúa una suma (No es la operación lógica _AND_), si el resultado de esta suma, nos da como resultado un valor
algo mayor que el hexadecimal *_FF_* (o en notación decimal a 255), le restamos *_FF_* al resultado hasta que obtengamos 
necesarimante un valor menor o igual a *_FF_* y por último, este valor resultante, lo buscamos en la tabla *_E_* 
y lo reemplazamos por su correspondiente. ¿Fácil, no?

[NOTE]
=====================================================================
Hay dos excepciones:

* Cualquier valor multiplicado por 1, da como resultado el mismo valor y no se necesita realizar el
procedimiento anterior. e.g A5 * 1 = A5

* Cualquier valor multiplicado por cero, nos da cero.
=====================================================================

Quedará más claro con un ejemplo:

Si la entrada es D4 BF 5D 30 y, b0 = D4, b1 = BF, b2 = 5D, b3 = 30.

Con la matriz de multiplicación respectiva:
[options="header"]
|==========================================
|*02*|*03*|*01*|*01*   
|*01*|*02*|*03*|*01*   
|*01*|*01*|*02*|*03*  
|*03*|*01*|*01*|*02*  
|==========================================

Tenemos:
[subs="quotes"]
--------------------------------------
*B1* = (D4 * 02) XOR (BF * 03) XOR (5D * 01) XOR (30 * 01)
   = E(L(D4) + L(02)) XOR E(L(BF) + L(03)) XOR 5D XOR 30
   = E(41 + 19) XOR E(9D + 01) XOR 5D XOR 30
   = E(5A) XOR E(9E) XOR 5D XOR 30
   = B3 XOR DA XOR 5D XOR 30
   = *04*

*B2* = (D4 * 1) XOR (BF * 2) XOR (5D * 3) XOR (30 * 1)
   = D4 XOR E(L(BF)+L(02)) XOR E(L(5D)+L(03)) XOR 30
   = D4 XOR E(9D+19) XOR E(88+01) XOR 30
   = D4 XOR E(B6) XOR E(89) XOR 30
   = D4 XOR 65 XOR E7 XOR 30
   = *66*

*B3* = (D4 * 1) XOR (BF*1) XOR (5D*2) XOR (30*3)
   = D4 XOR BF XOR E(L(5D)+L(02)) XOR E(L(30)+L(03))
   = D4 XOR BF XOR E(88+19) XOR E(65+01)
   = D4 XOR BF XOR E(A1) XOR E(66)
   = D4 XOR BF XOR BA XOR 50 
   = *81*

*B4* = (D4 * 3) XOR (BF*1) XOR (5D*1) XOR (30*2)
   = E(L(D4)+L(3)) XOR BF XOR 5D XOR E(L(30)+L(02))
   = E(41+01) XOR BF XOR 5D XOR E(65+19)
   = E(42) XOR BF XOR 5D XOR E(7E)
   = 67 XOR BF XOR 5D XOR 60
   = *E5*

--------------------------------------

* *AddRoundKey*

En la transformación del _AddRoundKey_, se realiza un _XOR_ entre la _matriz de estados_ contra la matriz de la 
_Round key_, esto quiere decir, que los 128 bits de la matriz de estados (16 bytes) se les hace un _XOR_ contra 
los *128 bits* de la matriz de la _Round Key_ (*16 bytes*), recuerden, esta operación es realizada por cada byte en 
la misma posición en ambas matrices, así que si en la _matriz de estados_ tenemos en la posición [0][0] = *45* y 
en la matriz de la _Round key_ en la misma posición tenemos un *64*, entonces realiza la operación del _XOR_ entre 
ambos valores, e.g _45 XOR 64_ = *21*.

Un ejemplo más grande:

Matriz de estados
[options="header"]
|==========================================
|*45*|*6F*|*63*|*75*
|*6E*|*6D*|*6C*|*72*
|*20*|*65*|*61*|*61*
|*6E*|*6E*|*74*|*20* 
|==========================================

Round key
[options="header"]
|==========================================
|*64*|*72*|*67*|*36*
|*36*|*36*|*6C*|*6B*
|*79*|*62*|*61*|*72*
|*38*|*6D*|*73*|*36*
|==========================================

AddRoundKey
[options="header"]
|==========================================
|*21*|*1D*|*04*|*43*
|*58*|*5B*|*00*|*19*
|*59*|*07*|*00*|*13*
|*56*|*03*|*07*|*16*
|==========================================

** *Key expansion* 

¿De dónde sale este Round Key?

El _Round key_ es una serie de sub-transformaciones derivadas de las anteriormente mencionadas: _SubBytes_,
_ShiftRows_ y _MixColumns_, dicha transformación es llamada _expansión de la clave_ ó _Key expansion_, toma como
entrada una clave de cuatro palabras (En la literatura se refieren a las cuatro palabras ó _four-words_ para dar
a entender que cada 'palabra' es por decir una columna, si tomamos la representación de esta entrada como una 
matriz de 4 x 4 como mencione al inicio y cada una de estas columnas con 4 dígitos, donde cada digito consiste 
en 1 byte, dando en total 16 bytes) y produce un arreglo lineal de 44 palabras (176 bytes; 16 bytes * 11 Rondas 
= 176 bytes), el cual es suficiente para proveer al _Round Key_ inicial y a las siguientes 10 rondas del 
cifrado. 

El proceso comienza copiando la clave en las primeras cuatro palabras de la _expansion key_ y el resto de la 
_expansión key_ es rellenado cuatro palabras a la vez, donde cada palabra por _Round Key_ que se añade, cada 
*w[i]*, depende inmediatamente de las sub-transformaciones resultantes aplicadas sobre *w[i-1]* y *w[i-4]* y las
siguientes tres operaciones son un simple _XOR_.

Para explicar el proceso de las sub-transformaciones, usare una definición convencional, el símbolo _*g_ que 
denota estas complejas transformaciones y consta de lo siguiente:*

. *RotWord*: Se realiza una rotación circular de un byte a la izquierda en una palabra, esto quiere decir que
si tenemos esto *[B0, B1, B2, B3]* la rotación nos lo dejara asi *[B1, B2, B3, B0]*.

. *SubWord*: Usamos la misma tabla *S-Box* para realizar la sustitución, si tenemos esto *[6b, 72, 36, 36]*, buscamos los
valores correspondiente en la tabla *S-Box* y nos da como resultado la transformación, *[7F, 40, 05, 05]*.

. *Rcon*: Al anterior resultado obtenido, se le aplica un _XOR_ por un valor constante de ronda o un vector generador,el 
*Rcon [j]*, consiste de una palabra cuyos tres octetos más a la derecha son siempre 0, *[Rcon[j], 0, 0 , 0]*. El efecto
de realizar un _XOR_ con el *Rcon*, es solo para realizarlo con el byte más a la izquierda. Cada valor en el *Rcon[j]*
es diferente por cada ronda y sigue esta tabla:

[options="header"]
|==========================================
|   j   |1 | 2| 3| 4| 5| 6| 7| 8| 9|10   
|*Rcon[j]*|01|02|04|08|10|20|40|80|1B|36    
|==========================================

. *XOR*: Al resultado obtenido por el *Rcon* se le hace un _XOR_ con la primera columna de la _Round Key_, *w[0]*.

Un ejemplo de todo este proceso del _expansion key_, debería dejarlo un poco más claro:

Si nuestra clave es,
[options="header"]
|==========================================
|*64*|*72*|*67*|*36*
|*36*|*36*|*6C*|*6B*
|*79*|*62*|*61*|*72*
|*38*|*6D*|*73*|*36*
|==========================================

Donde cada *w[i]* toma *4 bytes* por columna:
[subs="quotes"]
--------------------------------------
*w[0]* = [64 36 79 38]
*w[1]* = [72 36 62 6d]
*w[2]* = [67 6c 61 73]
*w[3]* = [36 6b 72 36]
--------------------------------------
El proceso para generar la primera columna de la _Round Key_, donde esta primera sigue el proceso descrito
anteriormente.

Sea *w[4]* la primer columna de la _Round Key_ generada por la _expansion key_

[subs="quotes"]
--------------------------------------
*w[4]* = *w[0]* _XOR_ *g(w[3])*
--------------------------------------

[subs="quotes"]
--------------------------------------
Si, *w[0]* = [64 36 79 38]
--------------------------------------	

Para calcular *g(w[3])*: 
[subs="quotes"]
--------------------------------------
Si, *w[3]* = [36 6b 72 36]
--------------------------------------

Rotación: 
[subs="quotes"]
--------------------------------------
*w[3]* = [6b 72 36 36]
--------------------------------------

Sustitución con *S-Box*:
[subs="quotes"]
--------------------------------------
sobre *RotWord(w[3])* = [7F 40 05 05]
--------------------------------------

_XOR_ entre el valor anterior y el Rcon
[subs="quotes"]
--------------------------------------
*SubWord(RotWord(w[3]))* por el *Rcon[j]*, donde *Rcon[1]* = 01.

[7F 40 05 05] _XOR_ [01 00 00 00] = [7E 40 05 05]
--------------------------------------

Por último un _XOR_ entre el ultimo resultado valor y *w[0]*
[subs="quotes"]
--------------------------------------
[7E 40 05 05] _XOR_ [64 36 79 38] = [1A 76 7C 3D]
--------------------------------------

Por lo tanto, después de estas transformaciones

[subs="quotes"]
--------------------------------------
*w[4]* = [1A 76 7C 3D]
--------------------------------------

Y como se mencionó, las siguientes tres son simples _XOR_:

[subs="quotes"]
--------------------------------------
*w[5]* = *w[4]* _XOR_ *w[1]* = [68 40 1E 50]

*w[6]* = *w[5]* _XOR_ *w[2]* = [0f 2C 7F 23]

*w[7]* = *w[6]* _XOR_ *w[3]* = [39 47 0D 15]
--------------------------------------

[options="header"]
|==========================================
|*1A*|*68*|*0F*|*39*
|*76*|*40*|*2C*|*47*
|*7C*|*1E*|*7F*|*0D*
|*3D*|*50*|*23*|*15*
|==========================================

== Resumen de la estructura de AES

. La llave proporcionada como entrada es expandida en un array de 44, palabras de 32-bits, *w[i]*, donde cuatro 
palabras distintas (*128 bits*) sirven como _Round Key_ para cada ronda.

. Cuatro diferentes operaciones son realizadas, una permutación y tres sustituciones: 
	.. _*SubBytes*_: Usando la *S-Box* se realiza una sustitución byte a byte del bloque.
	.. _*ShitRows*_: Una simple permutación
	.. _*MixColumns*_: Una sustitución que hace uso de la aritmética sobre campos finitos de Galois.
	.. _*AddRoundKey*_: Un _XOR_ con el bloque actual con respecto a una porción de la clave de expansión.

. La estructura es simple. Tanto como para cifrar y para el descifrar, se comienza con una fase del _AddRoundKey_,
seguida de nueve rondas, donde cada una incluye las cuatro operaciones realizadas, seguidas de una décima ronda
de tres fases.

. Solo la fase del _AddRoundKey_ use la llave. Por esta razón el cifrado comienza y termina con una fase del 
AddRoundKey_. Cualquier otra fase aplicada al principio o al final, es reversible sin conocer la clave, por lo 
anto no añadiría seguridad.

. Por si sola, la fase del _AddRoundKey_ no es tan formidable. Las otras tres fases están para crear confusión, 
difusión y no linealidad en salida, pero, por ellos solos no habría seguridad porque no harían uso de la clave.
Este cifrado lo podemos ver como operaciones alternantes de cifrado con XOR (AddRoundKey) de un bloque, seguido 
con un bloque transformado varias veces (Las otras tres fases).

. La ronda final, consiste en solo tres fases. Es requerida para hacer que el cifrado sea reversible (Descifrado).

. Cada fase es fácilmente reversible. Para la sustitución de bytes, la permutación, multiplicación de columnas,
en el proceso de descifrado, hay funciones inversas usadas por el algoritmo de descifrado. Para la fase del 
AddRoundKey, la inversa es lograda haciendo un XOR de la misma Round Key contra el bloque. *A XOR B XOR B = A*.
Cabe destacar, que aunque se usan funciones inversas para descifrar, el algoritmo de descifrado no es idéntico
al de cifrado, lo cual hace que _AES_ tenga una estructura particular.

Los desarrolladores de Rijndael (AES), diseñaron el algoritmo de expansión de clave para ser resistente a 
conocidos ataques de criptoanálisis. La inclusión de la dependencia de cada ronda por una constante de ronda 
elimina la simetría o la similaridad entre las formas en las que se genera cada _Round Key_. El criterio 
especificado para esto, fue:

* El conocer una parte de la clave o de una Round Key no permite conocer el resto de las Round Key generadas.

* Velocidad en una amplia variedad de procesadores.

* Difusión de la clave durante cada Round Key, es decir, un solo bit de la clave afecta muchos bits de las Round
Key siguientes.

== Conclusión

Su pareja esta jodiendo mucho? Sus hijos necesitan un castigo? Ponganles a cifrar manualmente 16 bytes con AES.
No, mentiras, hablando seriamente, este articulo tuvo la intención de tratar de explicar que procesos realiza 
AES para cifrar, sin ahondar en la complejidad matematica, desde el 2001 hasta hoy no han sido capaz de 
romperlo y hay muchos investigadores que rodean este tema, asi que si alguien les dice que rompio AES, 
preguntele primero si la clave era muy facil de adivinar por medio de ingenieria social o era tan corta que por 
fuerza bruta le tomo 1 día.

== Referencias

* William Stallings, Cryptography and Network Security: Principles and Practice, Fifth Edition.

* http://www.adamberent.com/documents/AESbyExample.pdf[AES by Example]

* http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf[FIPS, Federal Information Processing 
Standards Publication-197]

* http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf[Rijndael Proposal]

* http://www.axantum.com/AxCrypt/etc/About-AES.pdf[About AES]

* https://kavaliro.com/wp-content/uploads/2014/03/AES.pdf[AES Example]