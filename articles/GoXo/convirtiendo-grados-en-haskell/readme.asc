= Convirtiendo grados ° en haskell

En este artículo se hablará de una de las unidades de medida por excelencia en
matemáticas: *el grado*, particularmente el
https://es.wikipedia.org/wiki/Grado_sexagesimal[grado sexagesimal].

El *grado sexagesimal* es una unidad de medida muy utilizada para describir
una posición en una circunferencia, básicamente se divide la longitud de la
circunferencia en 360° grados, partiendo de que el ángulo recto tiene 90°grados
y sería la cuarta parte de la totalidad de los grados de la circunferencia.

La notación por defecto para describir un Angulo sexagesimal es: *grados (°),
minutos (') y segundos ('')*

== Haskell

El lenguaje de programación *Haskell* es un lenguaje basado en el paradigma de
programación *funcional*, fuertemente tipeado y con semánticas no estrictas.

Ha sido uno de los lenguajes más conocidos de tipo _funcional_ ya que su
naturaleza es puramente funcional, es decir, no se mezcla con otros tipos
de paradigmas como la programación *dirigida a objetos* y las *funciones*
son tratadas como el objeto primario por excelencia.

== CodeEval reto 160

Este reto propone tomar grados (°) representados en números decimales y
convertirlos a su notación de grados sexagesimal.

Por ejemplo: el grado *330.39991833* debe ser convertido a *330.23'59"*

== Implementación de código

A continuación se explicarán las funciones implementadas en Haskell
para resolver este reto:

1.Función *listToDoub:* esta función toma los elementos tipo *Strings* o
*cadenas de caracteres* de una lista y los convierte en elementos tipo
*Double* o *decimales coma flotante*

[source, haskell]
----
listToDoub :: [String] -> [Double]
listToDoub = map read
----

2.Función *formatGo:* esta función toma un número entero y lo convierte
(formatea) a texto
, pero antes mira si el número es menor que 10, entonces le agrega *0* al
principio para que todo número compuesto por un dígito quede de dos dígitos con
el *cero* delante. Por ejemplo el *9* quedaría *09*

[source, haskell]
----
formatGo :: Integer -> String
formatGo n = if n < 10
             then '0' : show n
             else show n
----

3.Función *degToTime*: esta función hace prácticamente todo el proceso de
conversión de grados decimales a grados sexagesimales de la siguiente manera:
Toma como entrada, el *grado* representado como un número tipo double, luego
*d* -> es la parte entera del *grado*, *temp* -> es una variable dedicada
a guardar un valor temporalmente, *m* -> son los minutos, *s* -> son los
segundos. Finalmente se concatenan las variables de acuerdo al formato requerido
(ver última línea de la función).

si se desea conocer más a profundidad la fórmula de conversión, diríjase a
http://www.rapidtables.com/convert/number/degrees-to-degrees-minutes-seconds.htm

[source, haskell]
----
degToTime :: Double -> String
degToTime num = let d = truncate num
                    temp = num - fromInteger d
                    m = truncate(temp * 60)
                    s = truncate((temp - fromInteger m / 60) * 3600)
                    in show d ++ "." ++ formatGo m ++ "'" ++ formatGo s ++ "\""
----

4.Función *main:* esta función toma las líneas que debe leer proporcionadas
por el reto y las guarda en la varible *contents*, luego se convierte todo este
contenido a una lista de elementos tipo "string" con la función *lines*,
 esta lista se convierte a elementos tipo "double"
con la función *listToDoub* previamente descrita y se guarda en la
variable *lista*.

Finalmente se aplica la conversión *degToTime* ya descrita a cada uno de los
*elementos* de la lista con la función *map*, se guarda el resultado en la
variable *ans* y se muestra por consola:

[source, haskell]
----
module Main where

import System.Environment (getArgs)

main = do
    (file:_) <- getArgs
    contents <- readFile file
    let lista = listToDoub (lines contents)
    let ans = map degToTime lista
    mapM_ putStrLn ans
    return()

----

Se puede apreciar claramente que todo el programa esta compuesto por
solo *4* funciones, es la función *main* o "principal" la encargada de llamar
a las otras 3 en un proceso de ejecución procedimental, aun así todo lo que hace
la función *main* de forma procedimental se puede hacer sin necesidad de un
procedimiento, es decir
en una sola línea de código sin necesidad de utilizar los *let* o las variables
*lista* y *ans*, pero se hizo de
esta manera para mostrar la solución de una manera educativa y fácil de
comprender.

== Referencias
https://es.wikipedia.org/wiki/Grado_sexagesimal[Grado sexagesimal en Wikipedia]

https://es.wikipedia.org/wiki/Haskell[Haskell en Wikipedia]

== Link del reto
https://www.codeeval.com/open_challenges/160/[Nice Angles]

