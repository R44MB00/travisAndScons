= Configurando el repositorio de Fluid en GitHub

*Fluid-signal* es una empresa comprometida con el mejoramiento continuo,
por esto las nuevas soluciones que todo *talento* sube al repositorio deben
estar enmarcadas con ciertos requisitos que exigen que los archivos
sean *rigurosos*, *elegantes* y *precisos*.

Para lograrlo se deben subir los archivos con *código*
parametrizados por los https://es.wikipedia.org/wiki/Lint[Linters] propios
de cada lenguaje de programación y las soluciones con *texto* deben ser
de de tipo *ascii doc* y estar parametrizadas bajo el formato
https://github.com/cucumber/cucumber/wiki/Gherkin[Gherkin], el cual es un 
formato que facilita la asimilación y comprensión de una solución textual.

Los lenguajes de programación por defecto que mínimamente todo *talento*
en *fluid-signal* debe implementar y entender son:
*bash, c#, clojure, haskell, java, javascript, ,python y ruby*;
adicionales a estos también se pueden encontrar en el repositorio
soluciones en lenguajes como: *c/c++ y perl*.

_A continuación se detalla el procedimiento para configurar el repositorio en
un sistema operativo basado en Debian (linux)._

== Configuración GitHub

https://es.wikipedia.org/wiki/GitHub[GitHub] es una plataforma bastante
robusta, se lanzó en Febrero del 2008 y ha permitido que grandes proyectos se
hayan consolidado. Está basada en _"ruby on rails"_ y facilita mucho la
interacción y el desarrollo dinámico de proyectos basados en el concepto de
https://es.wikipedia.org/wiki/Computaci%C3%B3n_en_la_nube[computación
en la nube]. El repositorio de *fluid-signal* en GitHub se puede encontrar
https://github.com/fluidsignal/[aquí].

Todo *talento* debe crear su cuenta personal en *Github*, su repositorio *personal*
debe estar enlazado con el repositorio de *fluid-signal* como se muestra en la
siguiente imagen:

image::./2.png[]
*_Figura1: Talento Goxo "forked from fluidsignal/training"_*

Una vez el enlace "forked" está creado se debe hacer el primer *pull request* 
para traer al repositorio *personal* todo el repositorio de *fluid signal*.

image::./4.png[]
*_Figura2: nuevo "pull request"_*

El pull request debe quedar de la siguiente manera:

image::./3.png[]
*_Figura3: Primer "pull request"_*

_En *base fork:* repositorio personal y en *head for:* repositorio de fluidsignal_

*Nota:* darle clic al link "compare across forks" para facilitar el "pull
request"

Primero se crea el *pull Request*, luego se *aprueba*, y el repositorio *personal*
queda igual que el repositorio de *fluid-signal*, es como hacer un copiar-pegar
al repositorio *personal*.

== Git

Para instalar *Git* ejecutar el siguiente comando en consola:

[source,bash]
----
sudo apt-get install git-core
----

Comprobar la *versión* instalada:

[source,bash]
----
git --version  # debe ser >= 1.9.1
----

Configurar *Git* con nuestra cuenta personal:

[source,bash]
----
git config --global user.name "Tu nombre"
git config --global user.email "Tu email"
----

Se debe clonar (descargar) el repositorio *personal* al *ordenador*.
En la sección derecha dar clic a *"Clone or download"*, copiamos el
*link* que se muestra para *clonarlo*:

image::./5.png[]
*_Figura4: se va a clonar el link https://github.com/Goxo/training.git_*

A modo de ejemplo, vamos a clonar el repositorio personal a la carpeta
"Documents" del ordenador:

[source,bash]
----
cd Documents
git clone https://github.com/Goxo/training.git
----

*Nota:* el *talento* elige cualquier carpeta que desee utilizar, puede ser
diferente de "Documents".

image::./6.png[]
*_Figura5: el repositorio en el ordenador_*

*Nota:* las únicas carpetas que se deben modificar son *articles* y *challenges*.

== Ruby

Antes de instalar cualquier programa es primordial tener primero *ruby-dev* en el
ordenador, para instalarlo ejecutar el siguiente comando en consola:

[source,bash]
----
sudo apt get install ruby-dev
----

Comprobar la *versión* instalada:

[source,bash]
----
ruby --version  # debe ser >= 2.3
----

Instalar el *linter* propio de *ruby*:
[source,bash]
----
sudo gem install ruby-lint
----

== Overcommit

El *overcommit* es primordial para controlar la calidad de las soluciones.
Para instalarlo ejecutar el siguiente comando en consola:

[source,bash]
----
sudo gem install overcommit
----

Comprobar la *versión* instalada:

[source,bash]
----
overcommit --version # debe ser >= 0.37
----

*Nota:* si existen problemas para *instalar* overcommit, se recomienda seguir su
https://github.com/brigade/overcommit[guía] de instalación completa.

Cada vez que se aloja un nuevo *repositorio* en el ordenador, por ejemplo cada
vez que se hace un nuevo "clone", se debe instalar el *overcommit*
y su *signatura* con los siguientes comandos en orden y dentro de la ubicación
del *repositorio*:

[source,bash]
----
overcommit --install
overcommit --sign
overcommit --sign pre-commit
----

*Nota:* el paso anterior es *primordial*, si no se realiza, no se podrán
garantizar soluciones de calidad por parte del *talento*, para comprobar que
*overcommit* está instalado en el *repositorio* ejecutar el siguiente comando:

[source,bash]
----
overcommit
----

Si no se muestra un *mensaje* en verde mostrando que está exitosamente
instalado, es porque los últimos pasos no se realizaron correctamente.


== Bash

*Bash* es el lenguaje de programación por defecto de una distribución basada en
*linux*, no necesita instalación, pero su *linter* *Shellcheck* es de
obligado uso:

[source,bash]
----
sudo apt-get install shellcheck
----

Comprobar la *versión* instalada:

[source,bash]
----
shellcheck --version # debe ser >= 0.3.3
----

== C/C++

Para el lenguaje *C/C++* es necesario implementar el famoso compilador *gcc*
, para instalarlo ejecutar el siguiente comando en consola:

[source,bash]
----
sudo apt-get install gcc
----

Comprobar la *versión* instalada:

[source,bash]
----
gcc --version # debe ser >= 4.8.4
----

El *linter* de este lenguaje es el mas exigente de todos, se llama *splint*,
es de obligación tenerlo y usarlo para ofrecer soluciones de alta calidad en
lenguaje *C/C++*:

[source,bash]
----
sudo apt-get install splint
----

Comprobar la *versión* instalada de splint:

[source,bash]
----
splint --version # debe ser >= 3.1.2
----

== C#

Para el lenguaje de programación *C#* utilizado y mantenido por *Microsoft*, se
puede instalar el compilador *Mono C# gmcs*:

[source,bash]
----
sudo apt-get install mono-gmcs
----

Comprobar la *versión* instalada:

[source,bash]
----
gmcs --version # debe ser >= 3.2.8
----

Por ahora no se está implementando un *linter* propio en este lenguaje.

== Java

Para *Java* se debe seguir esta
https://www.digitalocean.com/community/tutorials/instalar-java-en-ubuntu-con-apt-get-es[guía]
de instalación. El *linter* para *Java* que se debe utilizar es *Checkstyle*:

[source,bash]
----
sudo apt-get install checkstyle
----

Comprobar la *versión* instalada de *Java*:

[source,bash]
----
javac -version # debe ser >= 1.7
----

== Haskell

Para *Haskell* se debe seguir esta
https://docs.haskellstack.org/en/stable/install_and_upgrade/#ubuntu[guía] de
instalación. El *linter* de *Haskell* se llama *Hlint*:

[source,bash]
----
sudo apt-get install hlint
----

Comprobar la *versión* instalada de *Hlint*:

[source,bash]
----
hlint --version # debe ser >= 1.8.53
----

Comprobar la *versión* instalada de *Haskell*:

[source,bash]
----
ghci --version # debe ser >= 7.6.3
----

== Clojure

Para el lenguaje de programación *Clojure*, es necesario tener instalado *java*
primero en el ordenador, ya que *Clojure* corre en la
*_máquina virtual de java_*,
luego se debe instalar el *REPL* de *Clojure* llamado *Lein*
siguiendo esta http://leiningen.org/[guía] de instalación.

Comprobar la *versión* instalada de *Lein*:

[source,bash]
----
lein --version # debe ser >= 2.7.1
----

Por ahora no se está implementando un *linter* propio en este lenguaje.

== Python

Este *poderoso* lenguaje de programación se instala de la siguiente manera:

[source,bash]
----
sudo apt-get install python
----

Comprobar la *versión* instalada:

[source,bash]
----
python --version # debe ser >= 2.7.6
----

*Nota:* el talento es libre de usar *python2* o *python3*.

Los *linters* que se usan para *Python* son *Pylint* y *flake8*:

[source,bash]
----
sudo apt-get install pylint
sudo apt-get install python-flake8
----

Comprobar las *versiones* instaladas:

[source,bash]
----
pylint --version # debe ser >= 1.1.0
flake8 --version # debe ser >= 2.1.0
----

== Javascript

Este lenguaje de programación se compila y ejecuta con el software *NodeJS*.
Para instalar *node* en el ordenador seguir esta
https://nodejs.org/es/download/package-manager/[guía] de instalación.

Comprobar la *versión* instalada:

[source,bash]
----
node --version # debe ser >= 4.5
----

El *linter* que se recomienda usar con javascript es *Gjslint*,
para instalarlo se debe seguir esta
https://developers.google.com/closure/utilities/docs/linter_howto[guía]
de instalación.

Todo *talento* que esté aportando soluciones al repositorio de *fluid-signal*
debe tener instalado *todo* el andamiaje expuesto en este artículo, ya que a la
hora de hacer "commits" y "push" el software *overcommit* va a evaluar las
soluciones expuestas con las herramientas acá descritas, y si estas herramientas
no están instaladas correctamente, las soluciones no podrán ser subidas al
repositorio. Por esto se recalca tener siempre presente y funcionando el
software *overcommit* en el repositorio que es el que asegura que se suban
archivos de calidad.
