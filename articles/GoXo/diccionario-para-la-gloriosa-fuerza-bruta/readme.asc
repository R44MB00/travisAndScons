= Diccionario para la gloriosa fuerza bruta

Los *diccionarios* son compendios de líneas de texto ubicadas en un archivo de
texto informático. Su fin es el de proporcionar datos a los *Hackers* con los
cuales se hacen *ataques* con diversos fines.

== Ataques de diccionario y ataques de fuerza bruta

Los *ataques de diccionario* están basados en líneas de texto que corresponden
a palabras reales que existen en un idioma, por ejemplo para el
inglés tendríamos: index, home, account, secret, etc. y para el español
tendríamos: cuenta, usuario, principal, secreto, admin, etc.
Su fin es el de *encontrar* contraseñas, archivos, "hashes encriptados" y/o
directorios ocultos los cuales los usuarios confiados nombran y utilizan en
internet.

Los *ataques de fuerza bruta* toman un *set* de caracteres como el *abecedario*
o los números decimales e implementan todas las posibilidades de las
combinaciones en este *set* para formar palabras de un tamaño fijo. A
continuación vamos a ver cómo implementar un programa para crear diccionarios
de fuerza bruta utilizando *Crunch*.

image::img1.png[]
*_Figura 1: Crunch!_*

== Crunch

Crunch es un programa que permite hacer ataques de fuerza bruta con diccionarios
o "wordlists" creados con un orden específico, el proyecto se puede encontrar
de manera gratuita en este
https://sourceforge.net/projects/crunch-wordlist/[link].

La sintaxis es la siguiente:

[source,bash]
----
./crunch min max "set de caracteres"
----

Donde *min* es el mínimo tamaño de las palabras que queremos en el diccionario,
*max* es el máximo tamaño de las palabras en el diccionario, y finalmente el set
de caracteres el cual puede ser el abecedario junto con los números, o lo que
se requiera que se genere.

A modo de ejemplo utilizaremos el siguiente comando:

image::img2.png[]
*_Figura 2: comando para generar palabras de 1 y 2 caracteres con el set "abc"_*

Y se generaría el siguiente diccionario:

image::img3.png[]
*_Figura 3: diccionario generado_*

Adicionalmente si se quiere guardar el diccionario en un archivo de texto
utilizaríamos el comando *-o*

[source,bash]
----
./crunch 0 1 "abc" -o dic.txt
----

Entre más grande sea el tamaño de las palabras a generar y más grande sea
el *set* de caracteres, más grande y pesado será el diccionario que crearemos:

A modo de ejemplo:

[source,bash]
----
./crunch 5 5 "abcdefghijklmnopqrstuvwxyz0123456789" -o dic.txt
----

Me generará un archivo dic.txt que pesa un poco más de 360 MB y tendrá
*60'466.176* palabras de un tamaño de *5* caracteres.

Así pues es importante recalcar que entre más grande sea el diccionario, más
tiempo le tomará al ordenador de tener un ataque exitoso debido a que el tiempo
crece de manera exponencial en relación al tamaño de las palabras a generar
(para ataques de fuerza bruta).

Si se quiere hacer un ataque de *fuerza bruta* implementado palabras de un
tamaño de *16* caracteres en una computadora casera, esta tardará miles de
trillones de años en terminar el ataque, es decir, primero se extingue el sol
antes de que termine.

Mientras que en los ataques de diccionario con palabras comunes de un idioma,
el tiempo crece de forma lineal a la cantidad de palabras, es decir, este tipo
de ataque se demora menos que un ataque de fuerza bruta, pero su éxito depende
de que tan precavido es el *atacado*. Si el atacado usa palabras comunes y
corrientes en sus contraseñas, seguramente un ataque de diccionario será
muy efectivo.

== Referencias

https://es.wikipedia.org/wiki/Ataque_de_diccionario[Ataque de diccionario]

https://es.wikipedia.org/wiki/Ataque_de_fuerza_bruta[Ataque de fuerza bruta
en Wikipedia]

https://sourceforge.net/projects/crunch-wordlist/[Proyecto Crunch]



