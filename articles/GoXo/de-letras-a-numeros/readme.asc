= De letras a números

== De etras a números

Muchos retos de programación que hay en internet nos proponen pasar números a letras o visceversa; desde el nacimiento de la informática como un campo de estudio siempre se han diferenciado los números y sus tipos, de las letras (o carácteres) y sus tipos. por ejemplo en los números tenemos el caso de los enteros y de los decimales (o valores flotantes), en cuanto a las letras tenemos la variable tipo char (carácter) o string (conjunto de carácteres). En la mayoría de lenguajes de programación se implementan los caracteres encerrados en comillas '', por ejemplo el carácter '1' es un tipo de variable diferente al número 1 como tal, de modo que hacer una suma entre '1' y '2' no nos dará propiamente la suma entre 1 y 2, ya que son tipos de variables muy diferentes.

== Reto en CodeEval 110

Nos dan como entrada líneas de texto escritas en palabras que debemos traducir a números de modo que:

*Si la entrada es:*

fifteen

negative six hundred thirty eight

zero

two million one hundred seven

*La salida debe ser:*

15

-638

0

2000107

[source,python]
----
# Programa para pasar letras a números
# Llamamos a nuestra clase "text_to_num"
# Programa por Alejandro Aguirre Soto (GoXo o GoSo)

# invocamos la librería sys
import sys
class text_to_num:

	# la entrada de nuestro programa es implementada en argv[1]
	with open(sys.argv[1], 'r') as test_cases:

		# declaramos variable miembro text_val, la cual es un arreglo con los números en letras
		text_val = ['negative','zero','one','two','three','four','five','six','seven','eight','nine',
		'ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen',
		'twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety','hundred','thousand','million']

		# declaramos variable miembro num_val correspondiendo en posición con text_val
		num_val = ['','+0','+1','+2','+3','+4','+5','+6','+7','+8','+9','+10','+11','+12','+13','+14','+15','+16','+17','+18','+19',
		'+20','+30','+40','+50','+60','+70','+80','+90','*100','*1000','*1000000']

		# vamos a utilizar la función eval, la cual evalúa una cadena de carácteres 
		# con operaciones lógicas entre ellos, y nos devuelve el resultado de esas operaciones

		# leemos en line cada línea de texto
		for line in test_cases:

			# million y thousand son indices los declaramos por debajo de -1

			million = -2
			thousand = -2

			# res va a ser el "string" que va a ser evluado por eval, le agregamos un 
			# paréntesis como inicio de la operación matemática
			res = "("
			
			# variable text tipo arreglo, tomamos los valores de la línea separados por espacion " "
			text = line.strip().split(' ')

			# asignamos indices thousand y million si existen en la vvariable text
			if ('thousand' in text): thousand = text.index("thousand")
			if ('million' in text): million = text.index("million")
			
			# ciclo for enumerado por i, valores en word, iteramos en text				
			for i,word in enumerate(text):
				
				si i llega  los indices million o thousand cerramos parentesis en res
				if (i == million): res += ")"
				if (i == thousand): res += ")"
				
				tomamos el indice de texto de text_val por cada word
				idx = text_val.index(word)
	
				y le añadimos a res el valor en la posición idx de num_val
				res += num_val[idx]

				# si i llega  los indices million o thousand abrimos un nuevo parentesis en res
				if (i == million): res += "+("
				if (i == thousand): res += "+("

			# cerramos el último parentesis
			res += ")"

			# ci hay parentesis sin contenido adentro los reemplazamos por 0, para eval
			res = res.replace("()","0")

			# evaluamos a res, lo guardamos en ans (de answer):
			ans = eval(res)	

			# si nos dijeron que había un negative al principio, multiplicamos nuestro ans por menos 1
			if (text[0]== 'negative'): ans *= -1
			
			# finalmente imprimimos ans, como número evaluado	
			print ans
# Acá finaliza nuestro programa
----

== Link del reto
https://www.codeeval.com/open_challenges/110/[Text to number]
