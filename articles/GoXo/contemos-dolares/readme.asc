= Contemos dólares

== De números a letras

Muchos retos de programación que hay en internet nos proponen pasar números a
letras o viceversa; desde el nacimiento de la informática como un campo de
estudio siempre se han diferenciado los números y sus tipos, de las letras
(o caracteres) y sus tipos. Por ejemplo en los números tenemos el caso de los
enteros y de los decimales (o valores flotantes), en cuanto a las letras tenemos
la variable tipo char (carácter) o string (conjunto de caracteres). En la
mayoría de lenguajes de programación se implementan los caracteres encerrados
en comillas '', por ejemplo el carácter '1' es un tipo de variable diferente al
número 1 como tal, de modo que hacer una suma entre '1' y '2' no nos dará
propiamente la suma entre 1 y 2, ya que son tipos de variables muy diferentes.

== Reto en CodeEval 52

En este reto nos dan como entrada varias líneas donde cada una es un número
entero entre 1 y 1000000000 y representarlo en letras tipo moneda (en este caso
en dólares).

*Si la entrada es:*

3

10

21

466

1234

*La salida debe ser:*

ThreeDollars

TenDollars

TwentyOneDollars

FourHundredSixtySixDollars

OneThousandTwoHundredThirtyFourDollars

== Implementación del código

_Lenguaje de programación: C#_

[.step-list]

* Declaramos dos variables miembro estáticas de la clase llamada ts  y hs,
ts es un arreglo de los números en letras entre 0 y 19, y hs es un arreglo de
las decenas en letras entre 10 y 100, el cero lo tomamos como vacío o "":

[source,c#]
----
public static string[] ts = new string[] {"", "One", "Two", "Three","Four",
                                    "Five","Six","Seven","Eight","Nine","Ten",
                                    "Eleven","Twelve","Thirteen",
                                    "Fourteen","Fifteen","Sixteen","Seventeen",
                                    "Eighteen", "Nineteen"};


public static string[] hs = new string[] {"", "Ten","Twenty", "Thirty", "Forty",
                                  "Fifty","Sixty","Seventy","Eighty","Ninety" };
----

* El método que *EJECUTA* todo el trabajo se llama NumtoDollar y lo vamos a
utilizar recursivamente, tomamos la longitud de la variable value, para saber si
el número es unidad, decena, centena, etc...

* Si value es igual a 000 o a 000000, nos devolvemos recursivamente ya que no
queremos contar valores nulos:

[source,c#]
----

public static void NumToDollar(string value)
{
        int len = value.Length;
        if (value == "000") return;
        if (value == "000000") return;
----

* Si el número es una decena o unidad, convertimos este string a número entero.
* Si este número es menor o igual a 19, imprimimos el valor de la posición en el
arreglo ts.
* Si es mayor a 19, entonces imprimimos el valor de la posición en el arreglo hs
*Además invocamos recursivamente este mismo método pero con el valor unitario
de value, de esta manera nos imprime el valor de la decena, luego el valor
unitario:

[source,c#]
----
        if (len <= 2)
        {
            int num = Int32.Parse(value);
            if (num <= 19) Console.Write(ts[num]);
            else
            {
                Console.Write(hs[num/10]);
                NumToDollar(value.Substring(1,1));
            }
        }
----

* Si el número es una centena, tomamos el primer número de la centena y lo
guardamos en hun.
* Si hun es diferente de 0 (o sino sería una decena), entonces invocamos
recursivamente nuestro método para imprimir el primer número de la
centena, luego le añadimos "hundred".
* Y por último invocamos recursivamente la decena de esta centena:

[source,c#]
----
        if (len == 3)
        {
        string hun = value.Substring(0,1);
            if (hun != "0")
                {
                  NumToDollar(hun);
                  Console.Write("Hundred");
            }
            NumToDollar(value.Substring(1,2));
        }
----

* Las funciones siguientes hacen prácticamente los mismo, llaman recursivamente
nuestro método, antes del punto (de mil o de millón) luego invocan su valor
(thousand o million) y luego llaman recursivamente lo que va después del punto:

[source,c#]
----
        if ((len >= 4)&&(len <=6))
        {
            NumToDollar(value.Substring(0,len-3));
            Console.Write("Thousand");
            NumToDollar(value.Substring(len-3,3));
        }

        if ((len >= 7)&&(len <=9))
        {
            NumToDollar(value.Substring(0,len-6));
            Console.Write("Million");
            NumToDollar(value.Substring(len-6,6));

        }
    }
----

== Link del reto
https://www.codeeval.com/open_challenges/52/[Text dollar]

