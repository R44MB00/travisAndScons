= Números Decimales a Binarios

== Sistema Binario

El sistema Binario o de base 2, se caracteriza por usar solo dos dígitos los cuales son *0* y *1*. Este sistema es ampliamente conocido en el mundo de la informática y de la computación, ya que los sistemas lógicos informáticos solo conocen estos dos estados tanto físicamente (eléctricamente) como digitalmente. Físicamente la electrónica (transistores en general) de los ordenadores hacen que la electricidad se comporte de acuerdo a estos dos posibles estados (apagado-encendido, alto-bajo). A partir de lo anterior se crea un sistema computacional programable que puede hacer miles de cálculos en fracciones de segundos gracias a la velocidad de la electricidad.

== Algoritmo para convertir Decimal a Binario

*1.* Tomamos un número decimal, lo guardamos en la variable *num*.

*2.* Comprobamos que este número no sea igual a 0.

*3.* Si es igual 0, simplemente devolvemos el valor de cero en binario, es decir 0.

*4.* Inicializamos una variable que la llamaremos para este ejemplo *binary* de tipo text (string).

*5.* Hacemos división modular entre *num* y 2 (num%2), si nos da 1 entonces concatenamos "1" a *binary*.

*6.* Si por el contrario esta división modular nos da 0, conctenamos "0" a *binary*.

*7.* Actualizamos *num* como la división parte entera entre *num* y 2 (num/2).

*8.* si la variable *num* es igual cero pasamos al paso *9*, sino volvemos al paso *5* hasta que sea igual a *0*.

*9.* devolvemos la variable *binary* al revés, ya que los números binarios se leen de derecha a izquierda.

=== Ejemplo aplicativo para el número *5*

Paso 1. num = 5

Paso 2. si num == 0 -> devolvemos 0 *pero* num = 5 -> entonces pasamos al siguiente paso

Paso 4. binary = ""

Paso 5. num%2 = 5%2 = 1 -> binary = "1" -> concatenamos 1

Paso 7. num = num/2 = 5/2 = *2*

Paso 8. si num != 0 -> volvemos al paso *5*  

Paso 5. num%2 = 2%2 = 0 -> binary = "10" -> concatenamos 0

Paso 7. num = num/2 = 2/2 = *1*

Paso 8. si num != 0 -> volvemos al paso *5* (hasta que sea cero)
 
Paso 5. num%2 = 1%2 = 1 -> binary = "101" -> concatenamos 1

Paso 7. num = num/2 = 1/2 = *0*

Paso 8. si num == 0 -> por fin, pasamos al paso 9

Paso 9. devolvemos binary = "101" -> invertido sería "101"

*Nota aclaratoria:* si por ejemplo *binary* es = 100110, invertido quedaría 011001.

como el número *5* en binario es palíndromo en el ejemplo no se nota el cambio invertido.


== Reto en CodeEval 27

Nos dan varias líneas, cada una con un número *Decimal*, el objetivo es pasarlo al sistema *Binario*.

*Entrada:*

2

10

67

*Salida:*

10

1010

1000011


El programa en lenguaje *java* queda de la siguiente manera:

[source,java]
----
// Pasar un número decimal a número binario (base2)
// Por Alejandro Aguirre Soto (GoSo o GoXo)

//Imporamos las librerías necesarias para nuestro programa
import java.io.BufferedReader; 
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
public class Main { 	// clase llamada Main
	// método main (principal)
	public static void main(String[] args) throws IOException {
		// vamos a leer un archivo en la posición 0 de la variable args
		File filename = new File(args[0]);  
		// Nuevo objeto de tipo BufferReader para leer el archivo
		BufferedReader reader = new BufferedReader(new FileReader(filename));
		// En  la variable line de tipo String vamos a procesar el texto del archivo
		String line;
		// ciclo while que procesa línea por línea de texto
		while ((line = reader.readLine()) != null){
		// nos aseguramos de que no haya texto vacío 
			if (line.length()>0){
				// cada línea de texto, que se supone que es número decimal
				// la transformamos en entero con nuestro método decToBin
				int decNum= Integer.parseInt(line);
				// Mostramos por consola la conversión
				System.out.println(decToBin(decNum));
			}
		}
		// cerramos el reader 
		reader.close();
	}
	// método decToBin para convertir decimal en binario
	// este es el método mas importante de este programa
	// ya que este practicamente lo hace todo
	// Está basado en el algoritmo explicado en este artículo

	// este método toma un entero num
	// y nos devuelve una variable de tipo String (texto)
	private static String decToBin (int num){
		// inicializamos el string binary
		String binary = "";
		// si el número decimal es cero devolvemos su valor en 
		// binario es decir "0"
		if (num == 0) return "0";
		// si no es igual a cero
		else{
		// hacemos un ciclo while hasta que el número entero sea igual a cero
			while(num!=0){
				// si el módulo de este número con dos es igual a cero
				// entonces concatemos a bynary cero
				if (num%2 ==0) binary+="0";
				// si pasa lo contrario concatenamos uno
				else binary += "1";
				// actualizamos el número como la parte entera
				// de la división entre este número y dos
				num = num/2;
			}
		// cuando el número llegue a cero, se sale del ciclo while
		}
		// y devolvemos el string binario pero al reves, ya que los binarios
		// se leen de derecha a izquierda
		return new StringBuilder(binary).reverse().toString();
	}
}
// acá finaliza nuestro programa
----

== Referencias
http://www.eljavatar.com/2014/04/Algoritmo-Para-Convertir-Un-Numero-Decimal-a-Binario.html[Algoritmo para convertir Decimal a binario]

== Link del reto
https://www.codeeval.com/open_challenges/27/[Decimal to Binary]



