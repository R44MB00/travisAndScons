= Eficiencia de algoritmos parte II, Algoritmos voraces 

Asumamos que tenemos la tarea de encontrar el menor número que se pueda formar  con lo siguientes dígitos

 9 | 1 | 2 | 5 | 4 


Aunque la respuesta es obvia, si lo hiciéramos paso lo que deberíamos hacer es seguir el siguiente algoritmo.

1. Escoger el menor número de la lista
2. Concaternarlo el número al archivo de salida
3. eliminar el número de la lista y seguir al paso 1 hasta terminar

En realidad para los que digan que usar la función *_sort()_*, es la manera más fácil y optima de hacerlo en un problema real, si es cierto pero es con el seudo código anterior como funciona la función *_sort()_*, y lo eso que vimos anteriormente es conocido como un algoritmo voraz. ¿Porque? Los algoritmos voraces se encargan de dividir el problema en subproblemas (no hay que confundirlos con *divide y venceras*) y encontrar la solución más optima a este subproblema a esto se le conoce como *”Movimiento seguro”*, en el caso anterior el movimiento seguro es encontrar el menor de los dígitos, es así como nos aseguramos de que encontraremos el menor de los números y no otro. 

.menor
[source, python]
----
def minor_number(number):
    out = ""
    while len(number) > 0:
        out += str(min(number)) #safe move
        number.remove(min(number))
    return out
number = [9,1,2,5,4]
print minor_number(number)
----


=== Pasos de un algoritmo voraz 

Por lo general e independiente de la complejidad cuando usamos un algoritmo voraz usamos los siguientes pasos. 

1. Realizar el *_movimiento seguro_*
2. Evaluar este movimiento, si si es una solución optima
3. Dar solución al subproblema, en el caso anterior el subproblema es encontrar el dígito más pequeño
4. En los algoritmo voraces es muy importante estimar el tiempo de ejecución, para esto debemos familiarizarnos con https://en.wikipedia.org/wiki/Big_O_notation[*_Big O natation_*]

==== ¿Porque son importantes estos algoritmos?

Los algoritmos voraces son muy usados en ciencias de la computación, con el fin de optimizar las tareas, esto se debe a que se consideran bastante eficientes y fáciles de implementar, siendo así una gran alternativa para optimizar nuestro código. 


==== Estrategia general

image::https://dl.dropboxusercontent.com/u/98103636/Diagrama1.dia.autosave[]


Pensemos en otro problema en donde tenemos una mochila con capacidad de 15 kg y debemos ingresar *_n_* elementos que se caracterizan por tener un peso y un valor, la tarea es encontrar la máxima ganancia sin exceder el peso de la mochila.

El anterior  es un problema clásico de la informática conocido como *_el problema de la mochila_*    y una de las formas optimas de resolverlo es usando un algoritmo voraz.
 
.*El movimiento seguro* 

* En el anterior ejercicio el movimiento seguro consiste en ingresar a la mochila el ítem con máximo valor por unidad de peso.

.*El subproblema*

* El subproblema es ordenar los ítem por valor / peso

Cuando en la mochila no quepan más ítem, se puede ingresar la enésima parte del siguiente ítem en la lista. Es decir que si tenemos los ítem ordenados por valor y peso [x~1~,x~2~,x~3~,x~4~] y en la mochila solo cabe la x~1~ y x~2~ pero si sobra espacio en la mochila podemos introducir x~3~/_n_ y esta sera una solución optima.


== Conclusiones

En este post vimos un poco sobre algoritmo voraces y como estos pueden ayudarnos a optimizar nuestro código es por eso que son tan importantes en el mundo de las ciencias de la computación, pero también hay que decir que existen muchos problemas que no pueden ser resueltos por medio de estos algoritmos, es por eso que en las siguientes partes de esta serie de post veremos otros algoritmos que nos ayudaran a optimizar nuestras aplicaciones. 
