= Un poco sobre Linux

Actualmente existen muchos sistemas operativos en el mercado, estos pueden clasificarse de muchas formas, existen S.O para funciones especificas como administración de redes, pentesting, diseño gráfico e incluso algunos especializados en optimizar nuestros juegos. También existe una gran controversia de cual es el mejor S.O,  pero en esta oportunidad vamos a hablar de la importancia de conocer los sistemas GNU/Linux, algunos comandos básicos, y como mitigar algunas amenazas realizando *_Hardening_* y todo esto a través de ejemplos prácticos.    

== Linux Challenges

En un pequeño repaso por la historia podemos decir que GNU/Linux nació de los esfuerzos y el asocio de dos leyendas de la informática, estamos hablando de *linus torvalds* y *richard stallman* y que en realidad *_linux_*, hace referencia al kernel y no al S.O en si, y el S.O esta basado en *_Unix_* que es una de las grandes distribuciones de la historia, *_GNU (GNU Not Unix)_* 


image::https://microteknologias.files.wordpress.com/2009/03/distros.png[caption="Figura 1: ",title="Distros más populares"]     


Estas distribuciones se caracterizan por ser de código abierto, es decir que cualquiera puede recompilar el kernel, o modificar una distribución para crear otras, esto basado en los principios de las licencias *_GNU_*, es por esto que muchos otros S.O están basados en Linux como lo es Android o MAC OS X, e inclusive se conoce que actualmente Microsoft desarrolla una distro Windows basada en linux llamada Azure Cloud Switch 

=== ¿Porque es importante conocer sobre S.O GNU/Linux?

Aunque en la actualidad mas de la mitad de los equipos usen *_Windows_*, la mayoría de empresas prefieran usar distribuciones Linux para sus operaciones como los es Facebook, Google, La NASA, http://paraisolinux.com/18-lugares-donde-se-usa-linux/[entre muchas otras], es esta una de las razones de porque es importante conocer estos S.O, ya que esta claro que si queremos conocer el nivel de seguridad de los sistemas debemos saber como funcionan sus procesos. La segunda es porque en el mundo de la seguridad informática los S.O Linux son herramientas vitales para llevar a cabo tareas diarias, esto se debe a que ofrecen mucha flexibilidad, estabilidad y la suite de herramientas son muy amplias.   

Teniendo esto en mente y como segunda parte de este Post vamos a realizar una serie de retos en la plataforma http://overthewire.org[overthewire.org], con el fin de conocer algunos de los comandos básicos y familiarizarnos con la *_CLI (Interfaz de linea de comandos)_*

.Retos

* Bandit 1
* Bandit 5
* Bandit 12
* Bandit 21

===  Primeros pasos en la CLI 

Como ya lo hemos dicho la *_interfaz de linea de comandos (CLI)_*, es la clásica terminal donde el interprete analiza los comandos que le enviemos, otro tipo de interfaces son:

 * TUI (Text user interface)
* GUI (Graphic user interface)
* WUI (Web user Interfaz)

Pero de estas hablaremos después para estos ejercicios solo usaremos CLI, en el primer ejercicio los comandos que usaremos son:

[cols="2*", options="header"] 
|===
|Comando
|Función

|ls 
|el comando *ls* nos permite ver todos los archivos en el directorio que estemos, si queremos ver los archivos ocultos y sus propiedades usamos la opción *-la* 


|cd
|Este comando nos permite navegar entre directorios, usando el comando cd y el nombre del directorio al que queremos ir, ejemplo *cd /etc/apache*

|cat
|Este comando nos permite ver el contenido de un archivo por ejemplo cat */etc/passwd*
|===

Usando *ls* para ver que archivos hay en la carpeta, nos damos cuenta que existe un archivo llamado *“spaces in this filename”*, lo que algunos harían en primer instante es usar el siguiente comando:

 cat   spaces in this filename

Pero esto es un error ya que linux no reconoce los espacios de esta manera, es necesario poner un back slash *(\)* antes de cada espacio, de la siguiente manera:

 cat space\ in\ this\ filename

Es por esto que cuando creemos un archivo se recomienda usar guion bajo *(_)*  en vez de expacios, de la siguiente manera:

 space_in_this_filename

Es así como aprendimos a listar y leer archivos desde la terminal. 

=== Búsquedas rápidas

Cuando queremos buscar un archivo con cientos y cientos de lineas de código usamos el comando *grep*, este nos permite hacer búsquedas recursivas en archivos y facilitarnos la tarea de búsquedas 
 
 grep [busqueda][archivo] 

Buscamos en el archivo al usuario *millionth* que es el que tiene la contraseña:

image::https://dl.dropboxusercontent.com/u/98103636/Selecci%C3%B3n_522.jpg[caption="Figura 2: ",title="Lanzado comando *grep*"]

Este comando es muy útil para buscar configuraciones, nombres de usuarios, contraseñas entre muchas otras cosas.

=== Un poco de redes 

Una de las tareas de un analista es ver cual es el estado de la red, con que dispositivos y servicios se comunica el host, y esto incluye el análisis de puertos, una manera fácil y rápida de abrir comunicaciones y puertos en con *_netcat_*. Para este tercer ejercicio usaremos netcat para comunicarnos con el puerto 30000 en donde esta la contraseña.

----
 nc [host][puerto]
 Comando:
 nc 127.0.0.1 30000
----

NOTE: 127.0.0.1 es el host de la misma maquina.

Luego ingresamos la contraseña de el ejercicio anterior *_badito13_* y obtendremos la contraseña 

image::https://dl.dropboxusercontent.com/u/98103636/Selecci%C3%B3n_523.jpg[caption="Figura 3: ",title="Realizando la conexión al puerto 30000"]

=== Cron! 

En ocasiones necesitamos que algunas tareas se ejecuten cada *_n_*, por ejemplo necesitamos un script que haga backups cada 12 horas, para esto existe *_cron_* un *_Daemon_* que se encarga de ejecutar tareas periódicamente, estas pueden ser en horas, días, semanas o meses. 

En este ultimo ejercicio necesitaremos ver el archivo de configuración de cron que por lo general se encuentra en 
 
 /etc/cron.d/

Ahora vemos que hay un script *_.sh_* que se ejecuta periodicamente y almacena información en un archivo termporal, si usamos el comando *cat* obtendremos la contraseña como se ve en la _Figura 4_.

image::https://dl.dropboxusercontent.com/u/98103636/Selecci%C3%B3n_524.jpg[caption="Figura 4: ", title="Tareas que se ejecutan en cron"]

== Mitigando la amenazas

Existen muchas formas de proteger nuestros sistemas operativos Linux de algunas amenazas, entre ellas las entre las básicas están:

* Solo usar el super usuario cuando sea necesario
* Aplicar el principio de *_least privilege_* para cada usuario
* Actualizar los paquetes frecuentemente
* Tener políticas de contraseñas eficientes
* Administrar correctamente los permisos de cada usuario en el sistema
* Configurar correctamente el *_UFW_* y la red incluyendo solo usar los puertos necesarios

Este es el primero de lo que se espera sea una serie enfocada a los sistemas operativos, si hay términos confusos por favor consulte el glosario o el manual de la terminal *_man_*.  
