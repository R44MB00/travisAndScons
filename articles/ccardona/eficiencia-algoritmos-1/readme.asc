= Eficiencia de algoritmos, parte I: en el principio

En otra oportunidad y casi en las primeras luces de este blog nos dimos la oportunidad de hablar de la importancia de  las matemáticas en el diseño de algoritmos, en esta oportunidad hablaremos de algunos algoritmos importantes y como sea puede asegurar que un algoritmo sea optimo. Para esto resolveremos algunos ejercicios donde podremos ver la diferencia entre algoritmos y otros que no lo son.

=== Eficiencia es igual al número de recursos usados

La eficiencia de los algoritmos se pueden medir por el tiempo de ejecución y el espacio en memoria que usen, estas dos variables pueden medir la eficiencia o ineficiente de un algoritmo, ya que un algoritmo que se tarde mucho en procesar una tarea no seria considerado para llevar a cabo las operaciones, imaginemos si el algoritmo de búsqueda de Google se tardara más de un 30 segundos en procesar sus solicitudes, esto devaluaría a la organización, es por esto que muchas organizaciones invierten muchos recursos para optimizar sus aplicaciones.  


Los ejercicios realizados a continuación se realizaron en la plataforma http://www.cstutoringcenter.com/[cstutoringcenter.com]. 


==== Un ejemplo de eficiencia 

A continuación vemos dos algoritmos que cumplen con la misma función pero no al mismo nivel de eficiencia, el primero se encarga de hallar la serie *Fibonacci* a través de recursividad y el segundo usando *listas*

.fib
[source, python]
----
def fibo(n):
    if n <= 1:
        return n 
    else:
        return fibo(n-1) + fibo(n-2)   
print fibo(100)
----

Como se ve en la siguiente figura el tiempo de ejecución para hallar la serie fibonacci de 100 es ridículamente exagerado.

image::https://dl.dropboxusercontent.com/u/98103636/Selecci%C3%B3n_197.png[]

En el segundo ejercicio vemos que usando listas el algoritmo encuentra fibonacci de 100 rápidamente y eso que esta no es la forma más eficiente, pero podemos ver a simple vista la gran diferencia entre los dos algoritmos que cumplen la misma tarea. 

.fib2
[source, python]
----
def fibo2(n):
    fi = [0,1]
    if n <= 1:
        return n 
    while len(fi)<= n:
        fi.append(fi[-1]+ fi[-2])
    return fi[-1]

print fibo2(100)
----

image::https://dl.dropboxusercontent.com/u/98103636/Selecci%C3%B3n_198.png[]

Y si buscamos Fibonacci de 10000 el tiempo de ejecución no es mayor al del primer algoritmo, lo que puede ser increíble. 

image::https://dl.dropboxusercontent.com/u/98103636/Selecci%C3%B3n_199.png[]

= Conclusión 

En este primer post de esta serie vimos como la forma de plantearnos un problema y de diseñar un algoritmo influye terriblemente en su eficiencia, en las siguientes partes hablaremos de *algoritmos voraces*, *divide y vencerás* y las ventajas y desventajas de los algoritmos de *fuerza bruta*.  
