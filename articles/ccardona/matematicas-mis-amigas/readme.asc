= Las matemáticas son mis amigas.

Es un hecho muy real en el mundo de la seguridad información que *_no se llega a ser un buen hacker  si no se es un buen programador y no se es un buen programador si no se es un buen matemático_*. Esto es muy fácil de explicar ya que un buen hacker debe saber como funciona una aplicación, además debe ser capaz de programar sus propios scripts ya que cada situación en particular necesita sus particulares herramientas, estas son unas de las pocas razones de porque es importante la programación, y de esto esta claro que la optimización de algoritmos, la lógica de la programación nacen de aprender y conocer *_modelos matemáticos_*.

image::http://www.computersforcreativity.com/_/rsrc/1360804709079/about/programming-art-math/computers4creativitymap.png[caption="Figura 1: ",title="Relación Programación, Matemáticas y creatividad"]



Estos modelos están en muchos de los algoritmos que usan nuestras aplicaciones y juegos, como por ejemplo para el movimiento en un auto se usa la formula de *_velocidad y aceleración_*, para la colisión de dos objetos la *_ecuación de distancia entre dos puntos_*, para hallar la ruta más corta se usa el *_algoritmo de dijkstra_*, la manera más óptima de hallar el *_MCD_* y *_MCM_* es usando el *_algoritmo de Euclides_*. Estos son pocos ejemplos y los más mínimos de porque son importante el uso de modelos matemáticos para crear y optimizar algoritmos. 

Es por esto que en esta ocasión vamos a hablar de   algunas plataformas que nos ayudaran  a mejorar nuestra lógica y nuestras habilidades matemáticas a través de ejercicios practicos.

== http://www.mathchall.com[mathchall.com]  

image::https://dl.dropboxusercontent.com/u/98103636/Selecci%C3%B3n_403.jpg[caption="Figura 1: "title="Ejercicios mathchall"]

En esta plataforma podemos encontrar todo tipo de retos matemáticos y lógica, desde básicos hasta avanzados, algunos de estos ejercicios pueden resolverse a calculadora y lápiz y otros a través de scripts que realicen las complejas operaciones rápidamente, como en el siguiente código:    

.mcm_mcd.py
[source,python]
----
def gcd(a,b):
    """
    Euclidean algorithm
    """
    if b == 0:
        return a 
    else:
        return gcd(b, a % b)
def lcm(a,b):
    """
    Euclidean algorithm
    """
    if b == 0:
        return a 
    else:
        return (a * b)/ gcd(a,b)

#print lcm(7854,4746)   
    
con = 1
while True:
    if gcd(16,con) == 8 and lcm(16,con) == 48:
        print con
        break
    con +=1    
----   

Como se ve en el ejercicio anterior si usamos un modelo matemático el tiempo de ejecución va a hacer menor a si usamos este segundo código y si la entrada es muy grande, los recursos usados en el segundo ejercicio van a ser muy significativos en comparación con el primero. 

.mcd.py
[source,python]
----
def gcd(a, b):
    """
    naive algorithm
    """
    maxi = []
    for n in range(1, a):
        if a % n == 0 and b % n == 0:
            maxi.append(n)        
    print max(maxi)
gcd(7854, 4746)        

----


== Conclusiones

Es así como termina este post con una pequeña reflexión sobre las importancia de los modelos matemáticos en el diseño de algoritmos y como en ocasiones un "*_naive algorithm_*" puede ser la solución más fácil pero no la mejor.

_Los ejercicios en esta plataforma requieren más lógica que técnica, así que no se describirán todos en este post._  
