= Ingeniería social (SE)

La *_SE_* consiste en el arte de la manipulación por parte del atacante hacia el objetivo con el fin de conseguir información valiosa que le permite cumplir con sus planes.


Existen muchas herramientas que nos permiten reunir información y llevar a cabo este tipo de ataques, como por ejemplo:
Clonar paginas web y hacer  ataques de tipo phishing
Espiar a la victima
Actualizaciones falsas que en realidad instalan una backdoor o un payload
Spoofing de E-mails o correo
Redes Wi-fi falsas donde la víctima se conecta y son robadas sus credenciales
Entre otros muchas técnicas

== SE Challenges

En la siguiente sección vamos a realizar un par de ejercicios prácticos de SE usando herramientas como SET y wget en plataformas como http://www.thisislegal.com[thisislegal.com]  Los ejercicios son  *Bonus Challenge 11* y *Realistic 3* en  thisislegal.com

=== SET (Social engineer Toolkit)

*_SET_* es un herramienta proporcionada por  http://www.social-engineer.org[social-engineer.org], en esta pagina podemos encontrar todo tipo de información sobre SE incluyendo articulos, posdcast herramientas, entre otros.  Con esta herramienta cumpliremos el primer desafío (Bonus challenge 11) cuya meta es enviar un correo al servidor (en este caso la víctima) como si fuéramos el _admin_ de la página.  

image::https://dl.dropboxusercontent.com/u/98103636/Selecci%C3%B3n_486.jpg[caption="Figura 1: ", title="Opciones de _SET_"] 


Si nuestra distro no cuenta con set la podemos instalar con el comando:
	
    sudo apt-get install set
    
Luego de esto le damos la opción 1: _Social-Engineering Attacks_  luego opción 5:_Mass Mailer Attack_ y por ultimo de nuevo 1: _E-Mail Attack Single Email Address_. Luego de esto nos pedirá  el correo de destino, y si queremos usar un correo real o falso. Cabe destacar que esta no es la única manera de hacer  fake email, incluso con un pequeño script en cualquier lenguaje y teniendo el servidor de correos configurado en nuestro pc lo podríamos lograr, aunque se correo el riesgo de que si no es bastante creíble, automáticamente el servidor de correos lo enviara a *_Spam_* 

image::https://dl.dropboxusercontent.com/u/98103636/Selecci%C3%B3n_487.jpg[caption="Figura 2: ", title="Opciones de internet"]


También existe la opción de hacerlo con herramientas de internet que pueden ser incluso más fácil de usar como   https://emkei.cz/[emkei], un portal web que nos permite enviar correos desde falsos correos.

=== Robando las credenciales
Para el segundo ejercicio la tarea consistía en realizar un ataque de xss persistente al servidor, ya que este era vulnerable a este tipo de ataques (aunque existen varias herramientas como xsser, o vega para encontrar este tipo de vulnerabilidades, también lo podemos hacer manualmente), para ello era necesario escribir el script en la caja de comentarios.

	<script>alert('xss');</script>
    
Aunque este es el más básico de los scripts, si fuéramos un hacker más diestro en Javascript podríamos escribir un código que se robara las credenciales del administrador y las enviara a nuestro correo y así tendríamos todos los privilegios sobre la aplicación, aunque también podríamos usar *_beef-xss_* y llegar al mismo resultado.

_Nota: Las imágenes para este segundo ejercicio no están disponibles, porque el servidor tampoco lo esta, pero siguiendo los pasos anteriormente se lograra pasar el reto_ 

== Mitigando las amenazas

Como se vio en los ejercicios anteriores los ataques de tipo SE son muy peligrosos ya que permiten fácilmente pueden engañarnos para revelar información de un sistema u objetivo, es por eso que entre las medidas más comunes están no abrir correos sospechosos o de extraños, no revelar información indebida a nadie, y llegar a ser precavidos. Para esto debe implementarse un adecuado plan de entrenamiento  y adecuadas políticas de  uso de los activos.

En segundo lugar vimos que de una vulnerabilidad del tipo XSS y con un poco de ingeniería social podemos secuestrar las credenciales de algún usuario desprevenido, es por eso que los programadores deben tener especial cuidado con los módulos que usan, validar todas las entradas y excepciones y lo más importante TESTEAR, Testear y testear

*_Si existen dudas sobre algunos terminos consulte el glosario._*
