= Cambiando el paradigma tradicional
:hardbreaks:

La programación funcional surge de cambiar el paradigma de la programación imperativa (crear una serie de pasos para resolver un problema) a uno que busca resolver problemas mediante la recursividad de funciones, permitiendo resolverlos en algunas ocasiones de manera más rápida y eficaz.

== Porque no son tan populares los lenguajes funcionales

A pesar de que en los últimos años se ha incrementado el uso de lenguajes funcionales como Haskell y algunos híbridos como Clojure y SCALA, aún existen varios problemas con este paradigma. Su principal problema es que se vuelve muy complejo para los usuarios, debido a que tiene conceptos como funciones puras, funciones de orden superior, entre otros que son difíciles de imaginar y percibir, ya que son altamente asociados a conceptos matemáticos y para solucionar ciertos problemas estos son indispensables.

Otro problema que presenta este paradigma es que generalmente es muy difícil de predecir el rendimiento de un programa, debido a que las computadoras evolucionaron bajo una arquitectura diseñada para la programación imperativa, lo cual genera que algunas veces los programas cuando manejan grandes cantidades de datos pierdan el control de la memoria y causen errores. La principal causa de esto es que para mejorar el tiempo de ejecución y consumo de recursos en algunos casos el programa no invoca todas las variables hasta que estas no sean solicitadas , permitiendo ahorrar recursos, aunque esto es una ventaja en muchos casos, puede causar desbordamientos de memoria.

Y finalmente el problema que presenta frecuentemente es que dada su alta dependencia de entradas y salidas del usuario, en algunas ocasiones estas pueden tener efectos secundarios y ejecutar códigos maliciosos ya que no son validadas correctamente, aunque muchos lenguajes híbridos solucionan este problema aún es fácil caer en estos errores y permitir vulnerabilidades como ejecución de código remoto.

== Conclusiones

Es importante aprender a programar funcionalmente debido a que permite crear nuevos puntos de vista en la búsqueda de soluciones a problemas, pero aun asi no se debe dejar a un lado la programación imperativa ya que dependiendo el caso y el problema que se presente es posible que alguna de las dos maneras sea más eficiente, y los lenguajes híbridos pueden ser bastante útiles y eficaces.
