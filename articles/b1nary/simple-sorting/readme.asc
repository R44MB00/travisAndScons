= Codeeval Simple Sorting
:hardbreaks:

El reto simplemente es organizar los valores de mayor a menor.

== Solución

Utilizando y aprendiendo Clojure se logró solucionar el reto con los siguientes pasos:

[.step-list]
* Importar el paquete de herramientas string de clojure

[source, clojure]
----
(require '[clojure.string :as s])
----

* Luego definimos una función para convertir string a int que próximamente utilizaremos.

[source, clojure]
----
(defn parse-number
  [s]
  (if (re-find #"^-?\d+\.?\d*$" s)
    (read-string s)))
----

* Clojure permite utilizar un método de comparación para ordenar utilizando la funcion (sort) por lo que definimos la función cmp que convierte los strings a ints y lleva a cabo una comparación efectiva.

[source, clojure]
----
    (defn cmp [a b]
        (compare (parse-number a) (parse-number b)))
----

* Luego definimos una última función que nos permitirá tomar la linea del archivo y dividirla en un vector con todos los valores.

[source, clojure]
----
    (defn trim_s
        [text]
        (s/split text #" "))
----

* Finalmente se utiliza with-open para abrir el archivo que se ingresa por el argumento, y utilizando doseq se lee cada línea, a la cual primero se leerán los valores y se almacenaran en un vector, y luego se ordenaran para finalmente imprimirlos.


[source, clojure]
----
    (with-open [rdr (clojure.java.io/reader (first *command-line-args*))]
      (doseq [line (remove empty? (line-seq rdr))]
        (println(clojure.string/join " " (sort cmp (trim_s line))))))
----

== Caso de prueba

[.step-list]
* *5.221 -13.870 -33.081 -44.526 -56.885 28.057 -15.271 -42.209 90.569 -14.173 29.205 -92.246* queda ordenado "-92.246 -56.885 -44.526 -42.209 -33.081 -15.271 -14.173 -13.870 5.221 28.057 29.205 90.569"


=== Referencia

https://www.codeeval.com/open_challenges/91/[Reto Codeeval]
