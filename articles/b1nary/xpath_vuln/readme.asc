= Vulnerabilidades en Xpath
:hardbreaks:

Xpath es un lenguaje utilizado para procesar archivos xml que permite en muchos casos almacenar información como bases de datos en forma de nodos con la estructura de XML, pero al igual que cualquier programa que manipula consultas con información del usuario es susceptible a inyecciones de código malicioso.

En la siguiente solución del reto de Root-Me es posible evidenciar como se puede manipular una consulta para obtener información adicional.

== Xpath Injection String Root-Me

el reto inicialmente se presenta con la siguiente página web

image::/articles/b1nary/xpath_vuln/1.PNG?raw=true[]

El cual tiene un login simple , al que se le prueba una inyeccion basica de Xpath pero aparentemente tiene filtros activados y no permite ser explotada.

Entonces intentamos acceder al buscador en Members y este es un simple buscador que al ingresar cualquier dato busca si existe un usuario cuyo nombre contenga esto.

image::/articles/b1nary/xpath_vuln/2.PNG?raw=true[]

Cuando se intenta realizar una inyeccion basica en este primer campo podemos entonces ver el error y el query que el sistema está intentando realizar

image::/articles/b1nary/xpath_vuln/3.PNG?raw=true[]

== Creando un payload

Nuestro objetivo entonces es extraer toda la información de esta posible base de datos que contiene usuarios y contraseñas para poder acceder al sitio mediante el login

Para esto diseñamos entonces un query basándonos en el query que nos mostró el error. Supongamos que el sitio está diseñado en php por lo que el codigo deberia ser algo así
[source,php]
----
$search = $_GET['search'];
$query = "//user/username[contains(.,'".$search."')]";
----

Entonces este query simplemente está buscando en el nodo user, todos los username que contengan parcial o totalmente el texto que el usuario ingreso.
Ahora que sabemos esto primero encontramos una forma de "malformar" la consulta y es que inicialmente si le ingresamos cualquier texto´y le agregamos al final una comilla simple ' se cierran las comillas y el texto siguiente no va ser reconocido como string sino como código. Pero de igual manera se sigue teniendo un problema y es que de igual manera el php agrega *')]* al final por lo que nos causará errores entonces debemos una expresión que se pueda complementar con esta.

Primero iniciamos ingresando *x') or ('a' = 'a')]* de esta manera logramos que primero se cierre la primera condición y luego se evalúa con un or ambas , la segunda condición genera siempre un true, por lo que la selección de los usuarios es true y retorna la lista completa de usuarios que están dentro del nodo users

Luego, al igual que en sql, podemos juntar dos consultas para una misma salida utilizando el operador "|" , entonces agregaremos una segunda consulta que nos permite ver las contraseñas. Para esta segunda consulta empezamos seleccionando las contraseñas del nodo users con *//user/password*, pero recordemos que sin importar nuestra consulta php simpre va agregar al final "')]" , por lo que en mi caso decidí agregar lo mismo que en la primera consulta para que php la "autocompletado" de tal manera que la consulta final que ingresamos en el buscador es así  

*a') or ('a'='a')] | //user/password[contains(., 'a') or ('a'='a*

y se ejecuta de la siguiente manera

[source,php]
----
$query = "//user/username[contains(.,'a') or ('a'='a')] | //user/password[contains(., 'a') or ('a'='a')]";
----

Causando entonces que se impriman todos los usuarios y sus contraseñas

image::/articles/b1nary/xpath_vuln/4.PNG?raw=true[]

== Conclusiones

Finalmente es importante recordar que sin importar que tipo de lenguaje sea, no se puede permitir que el usuario ingrese datos sin antes validar que si sea el tipo de dato que se requiere y siempre es necesario tener algunos filtros activos para evitar ejecución de código no deseado.

== Referencias
https://www.root-me.org/en/Challenges/Web-Server/XPath-injection-string[Root-Me Xpath Injection Challenge]
