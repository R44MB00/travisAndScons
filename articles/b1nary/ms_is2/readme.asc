= Métodos seguros implementados de manera insegura v2
:hardbreaks:

Continuando con esta linea de articulos, en esta ocacion veremos como dada una configuracion correcta de un algoritmo de cifrado como AES CTR puede ser inutil cuando se utiliza algun otro metodo que puede exponer la informacion de manera indirecta.

== CRIME time

El siguiente caso es un reto del ctf Hack.lu 2016 donde nos dan el siguiente codigo
[source,ruby]
----
require 'openssl'
require 'webrick'
require 'base64'
require 'json'
require 'zlib'
require 'pry'

def encrypt(data)
  cipher = OpenSSL::Cipher::AES.new(128, :CTR)
  cipher.encrypt
  key = cipher.random_key
  iv = cipher.random_iv
  cipher.auth_data = ""
  encrypted = cipher.update(data) + cipher.final
  return encrypted
end

def get_auth(user)
  data = [user, "flag:"+File.read("flag.key").strip]
  json = JSON.dump(data)
  zip = Zlib.deflate(json)
  return Base64.strict_encode64(encrypt(zip))
end

class Srv < WEBrick::HTTPServlet::AbstractServlet
  def do_GET(req,resp)
    user = req.query["user"] || "fnord"
    resp.body = "Hallo #{user}"
    resp.status = 200
    puts get_auth(user).inspect
    cookie = WEBrick::Cookie.new("auth", get_auth(user))
    resp.cookies << cookie
    return resp
  end
end

srv = WEBrick::HTTPServer.new({Port: 12336})
srv.mount "/",Srv
srv.start
----

el codigo pertenece al sitio del reto y basicamente lo que hace es revisar que se ingreso atravez del parametro user y imprimir el mensaje "Hallo user" mas lo que se ingreso, adicionalmente crea un cookie "auth" con un valor en base64 el cual contiene el flag encriptado utilizando AES CTR 128.

Pero si sabemos que el cookie auth contiene el flag porque no desencriptarlo simplemente? la clave y el bloque de iniciacion son completamente aleatorios cada vez que realizamos una peticion al servidor, y lastimosamente AES CTR a diferencia de AES CBC no es vulnerable a ataques como oracle padding attack visto en el articulo anterior. 

Entonces es imposible obtener el flag? si miramos detalladamente el codigo, podemos ver que en la siguiente linea:

[source,ruby]
----
zip = Zlib.deflate(json)
----

Lo que esta sucediendo entonces es que se esta comprimiendo la informacion utilizando el algoritmo deflate y posteriormente esta se encripta y se pone en la cookie. El algoritmo deflate comprime los datos en base a estos mismos , generando un tamaño especifico. Cuando realizamos pruebas ingresando valores aleatorios en el parametro "user" vemos que el tamaño del cookie "auth" cambia cuando ingresamos muchas veces un mismo caracter, es entonces lo que intenta abusar el ataque CRIME (Compression Ratio Info-leak Made Easy). Creamos entonces un algoritmo que nos permita probar cada caracter mediante el parametro "user" y si vemos algun cambio en el tamaño del cookie quiere decir que este caracter esta presente en el flag.

El codigo que utilizamos entonces es el siguiente, creado en python
[source,python]
----
s = requests.Session()
flag = ''
length = 60
for j in range(100):
    for i in characters:
        r = s.get("https://cthulhu.fluxfingers.net:1505/?user=flag:"+flag+i+"XYZWNOPQRST")
        if (len(r.cookies['auth']) != length):
            flag+= i
            print flag
            break
			
----

Despues de ejecutarlo durante unos minutos obtenemos el flag "Mu7aichede"

== Conclusiones

Finalmente aprendimos que aunque utilicemos algoritmos que no son vulnerables a ataques podemos dejar pequeños huecos en nuestro codigo simplemente por utilizar de manera incorrecta otros algoritmos que si son vulnerables. En este caso la vulnerabilidad se podria evitar simplemente comprimiendo los datos despues de ser encriptados.

== Referencias

https://2016.hack.lu/[Hack.lu 2016 CTF]
