= Métodos seguros implementados de manera insegura v1
:hardbreaks:

El siguiente artículo pertenece a una serie de artículos en los que se pretende explicar la importancia de escoger un método seguro para proteger nuestras aplicaciones e implementarlo de manera correcta.

== Oracle tell me what you see

Los algoritmos de cifrado por bloque son popularmente utilizados por muchos metodos de encriptacion como AES, DES, etc que permiten encriptar la información de manera que cualquier tercero no pueda acceder a ella sin la llave.Pero como en muchos de los casos de seguridad informática, el mayor riesgo es el error humano y cuando un programador no sabe configurar correctamente el algoritmo de cifrado que seleccionó, puede poner en peligro la confidencialidad de sus datos.

Para demostrar esto utilizaremos un ejemplo práctico extraído del ctf CSAW clasificatorias online 2016, en donde se tiene una implementación incorrecta de AES CBC, en la que es posible extraer información sin conocer la llave y bloque inicial con el que se encripto los datos.

Inicialmente al ingresar al sitio del reto lo primero que notamos es una imagen con Neo hablando con el oráculo de matrix, también hay un pequeño formulario en html en el que se muestra un dato en base64, en este mismo formulario podemos ingresar o modificar estos datos y finalmente 2 botones , uno rojo y uno azul , donde el rojo envia lo que halla en el formulario y en caso de que hayamos modificado el texto en base64 nos mostrará un error que dice "Caught exception during AES decryption".

Lo que sucede aquí entonces es que tenemos un programa que está encriptando unos datos secretos, con una llave desconocida utilizando el algoritmo de AES CBC y el cual podemos enviar también información para que la desencripte, pero no mostrar el resultado.

Que necesitamos hacer para obtener esta información secreta?
Debido a que el desarrollador del sitio decidió no ocultar el error "Caught exception during AES decryption" cuando ingresamos una información invalida, podemos utilizar el ataque Oracle Padding Attack, que consiste básicamente en aprovecharse del método por defecto del padding que se utiliza en CBC. Pero qué es el padding ? En los cifrados por bloque es necesario que los datos que se quieren encriptar se dividan en un tamaño fijo de bloque, y cuando sobran datos que no alcanzan a llenar el tamaño del bloque es necesario rellenar los espacios faltantes utilizando datos que conocemos. Para nuestro ejemplo el método de padding utilizado es PKCS7 , que consiste en llenar los espacios con el número de espacios que faltan, es decir:

Si se necesitan 4 espacios para completar un bloque de 16 bytes , se agrega al final \x04 \x04 \x04 \x04

Si se necesitan 3 espacios, se agrega \x03 \0x3 \0x3

Dado que conocemos esto el ataque se aprovecha para adivinar cada byte a fuerza bruta utilizando el padding para verificar que si es el correcto, de tal manera que si tenemos el byte correcto el sistema no mostrará error alguno, pero si no el mostrara el error.

Para efectos practicos no se decidio crear un algoritmo propio para explotar esta vulnerabilidad, sino que se utilizo una libreria publica de Python que se puede encontrar https://github.com/mpgn/Padding-oracle-attack/blob/master/exploit.py[aqui]

== Conclusiones

Finalmente podemos concluir que el algoritmo de AES CBC es muy potente y puede encriptar información de una manera segura, pero un simple error como permitir que el usuario interactúe con la función de desencriptar y pueda visualizar los errores puede permitir que el poder de AES se pierda y se comprometa la información.

== Referencias
https://ctf.csaw.io/[CSAW Quals CTF 2016]
