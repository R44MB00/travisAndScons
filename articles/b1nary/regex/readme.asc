= Extrayendo información con expresiones regulares
:hardbreaks:

En algunas ocasiones es posible encontrarnos con grandes cantidades de datos sin procesar, ya sea que esta esté pública o la encontremos como resultado de una prueba de seguridad, pero algunas veces no sabemos cómo utilizar estos datos para convertirlos en información importante.
Un ejemplo claro de este serian grandes cantidades de mensajes de usuarios, los cuales podrían tener información importante como contraseñas, usuarios, etc., pero a mayor cantidad de datos más tedioso se vuelve la tarea de extraer la información y la posibilidad de revisar uno a uno los dato se vuelve casi imposible.
Es por esto que hoy en día utilizamos tantas herramientas como las expresiones regulares en la programación. Las expresiones regulares son una serie de caracteres que conforman un lenguaje cuyo fin es crear un patrón de búsqueda, el cual puede ser utilizado para identificar palabras o secuencias de texto específicas en grandes cantidades de datos.

== Emails 

Un ejemplo práctico de esto es entonces el siguiente código en bash que nos permite extraer todas las direcciones de correo que se encuentran en un archivo txt.

[source,bash]
----
$ grep -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b" file.txt
----

La expresión se evalúa de la siguiente manera:
[.step-list]
* Con la secuencia *[A-Za-z0-9._%+-]+* se busca cualquier carácter (mayúsculas o minúsculas entre la a y la z) incluido punto, porcentaje, más o menos. Y el signo + afuera de los corchetes indica que puede contener uno o más de los caracteres mencionados anteriormente.

* La secuencia *@[A-Za-z0-9.-]+* indica que primero va un @ seguido de uno o más caracteres que estén entre la a y la z o números, punto o guion.

* Finalmente la secuencia *\.[A-Za-z]{2,6}* indica que debe ir un punto y de 2 a 6 caracteres que se encuentren entre la a y la z (mayúsculas o minúsculas)

Si realizamos pruebas con textos como "test@this.com	fluid@test.co hackthis.com.co" solo las primeras 2 cadenas de caracteres se imprimirían ya que son las que cumplen con el patrón definido.

Al igual que esta forma para extraer información de una gran cantidad de datos, las expresiones regulares se pueden utilizar para evitar ingreso de contenido malicioso por cuenta de los usuarios. De manera similar se definiría un patrón que se utilizaría para filtrar los datos y evitar posibles ataques como SQLi.
